<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Bo Jeanes</title>
	<link href="https://bjeanes.com/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://bjeanes.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-11-26T00:22:42+00:00</updated>
	<id>https://bjeanes.com/atom.xml</id>
	<entry xml:lang="en">
		<title>Automatically refresh staging databases weekly from production snapshot</title>
		<published>2017-12-11T00:00:00+00:00</published>
		<updated>2017-12-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/automatically-refresh-staging-db/" type="text/html"/>
		<id>https://bjeanes.com/posts/automatically-refresh-staging-db/</id>
		<content type="html">&lt;p&gt;To get the most out of staging environments, it is important to have production
quality data (in both variety and size) at your disposal to identify potential
production problems before your customers do. For example, good data allows
developers to check that new features behave as expected with real-world data,
that a bugfix actually fixes a bug for a known scenario, or to benchmark a
database migration or the performance of new code.&lt;&#x2F;p&gt;
&lt;p&gt;Like many technology companies, at &lt;a href=&quot;https:&#x2F;&#x2F;www.covidence.org&quot;&gt;Covidence&lt;&#x2F;a&gt; we
use staging environment in a number of these critical ways, and more. In fact,
we actually use several different staging environments, some persistent and
some temporary.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bjeanes.com&#x2F;posts&#x2F;automatically-refresh-staging-db&#x2F;heroku-pipelines.png&quot; alt=&quot;Screenshot of the Covidence Heroku pipeline&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;production-deployments&quot;&gt;Production Deployments&lt;&#x2F;h3&gt;
&lt;p&gt;In production, we run two main deployments: &lt;code&gt;production&lt;&#x2F;code&gt; and &lt;code&gt;demo&lt;&#x2F;code&gt;. Our
&lt;code&gt;production&lt;&#x2F;code&gt; environment is... just that. Our &lt;code&gt;demo&lt;&#x2F;code&gt; environment is version of
our application that acts as a kind of playground for potential customers to
evaluate our product or for existing customers to learn or experiment with the
product without risking their production data. Data in this environment is
expunged on a rolling basis.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-production-deployments&quot;&gt;Non-production Deployments&lt;&#x2F;h3&gt;
&lt;p&gt;In staging, we have one environment each to mirror the production versions:
&lt;code&gt;staging&lt;&#x2F;code&gt; and &lt;code&gt;demo-staging&lt;&#x2F;code&gt;. These two deployments automatically get the
latest version of the code that has passed our continuous integration test
suite. The expectation is that these environments should be reasonably stable
and relatively safe to deploy to the production environments.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, we have a &lt;code&gt;dev&lt;&#x2F;code&gt; environment which deploys the latest code,
regardless of build status. This environment is expected to be less stable and
is sometimes used to deploy feature branches that need to see production
quality data before it can be merged to &lt;code&gt;master&lt;&#x2F;code&gt;. This also tends to be the
environment in which migrations are tested and benchmarked.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, we use an excellent feature of Heroku Pipelines to create disposable
staging apps for any open pull request to allow us to sanity check and QA test
the change.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;&#x2F;h3&gt;
&lt;p&gt;Of all those environments, only the pull request apps have &amp;quot;seed&amp;quot; data.
&lt;code&gt;staging&lt;&#x2F;code&gt;, &lt;code&gt;demo-staging&lt;&#x2F;code&gt;, and &lt;code&gt;dev&lt;&#x2F;code&gt; always have a recent snapshot of
production data to work with.&lt;&#x2F;p&gt;
&lt;p&gt;Keeping fresh production quality data in staging environments is a really
common problem for many companies and can often go along time without a
solution. However, we knew that it was an important problem to solve if we were
to work efficiently and effectively with our small team.&lt;&#x2F;p&gt;
&lt;p&gt;I want to share how we leverage some handy features of &lt;a href=&quot;https:&#x2F;&#x2F;www.heroku.com&#x2F;postgres&quot;&gt;Heroku
Postgres&lt;&#x2F;a&gt; to have effortless, push-button
production quality data in these staging environments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scheduled-and-push-button-database-forks&quot;&gt;Scheduled and push-button database forks&lt;&#x2F;h3&gt;
&lt;p&gt;Basically, we use Heroku&#x27;s database &amp;quot;forking&amp;quot; functionality, environment
variable-based configuration and database promotion, the Heroku Toolbelt, and a
few Heroku API calls to orchestrate a replacement DB.&lt;&#x2F;p&gt;
&lt;p&gt;We wrap up these steps in a script which runs every Sunday night via a
scheduled Buildkite job or whenever we push the &amp;quot;Build&amp;quot; button manually. This
means that our staging environment is never stale by more than about a week.&lt;&#x2F;p&gt;
&lt;p&gt;The steps to do this for each app are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new database as a &lt;code&gt;--fast --fork&lt;&#x2F;code&gt; of the production database, which
will use a compination of Postgres Write-Ahead Logs and leader-follower
replication to relatively quickly prepare a new database as a replica and
once it has caught up to the primary database, will separate from it as a
standalone instance.&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of the name of the old DB and the new DB.&lt;&#x2F;li&gt;
&lt;li&gt;When the replica is fully prepared and ready to process queries, promote it
via environment variables on and a restart of the application.&lt;&#x2F;li&gt;
&lt;li&gt;De-provision the old database so we aren&#x27;t paying for it.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For our &lt;code&gt;demo&lt;&#x2F;code&gt; to &lt;code&gt;demo-staging&lt;&#x2F;code&gt; copy, the dataset is actually so small that we
are using cheaper plans which don&#x27;t support Heroku&#x27;s forking, so for that we do
something slightly different:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create new database&lt;&#x2F;li&gt;
&lt;li&gt;Initiate a copy of data from the production version to staging version
(essentially a dump and then restore)&lt;&#x2F;li&gt;
&lt;li&gt;Once complete, promote new database and de-provision old one, as above.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;code&quot;&gt;Code&lt;&#x2F;h4&gt;
&lt;p&gt;Here&#x27;s the actual script we use, more-or-less un-changed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-ex
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Pass in Heroku API token
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# We run this script in a stateless Docker image, so to make the script a bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# cleaner, we just write out the credentials to a file that the Heroku Toolbelt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# knows to read.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if ! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grep -lq&lt;&#x2F;span&gt;&lt;span&gt; api.heroku.com &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.netrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;dev&#x2F;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;machine api.heroku.com&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.netrc
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;  login dev+heroku@covidence.org&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.netrc
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;  password $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.netrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 0600 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.netrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Helper function for calling Heroku API
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hapi &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --fail &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --silent &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --netrc &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --header &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Accept: application&#x2F;vnd.heroku+json; version=3&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;api.heroku.com$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Routine to wait for DB to be caught up, then promote it and de-provision the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# old instance.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;promote &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; pg:wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --wait-interval&lt;&#x2F;span&gt;&lt;span&gt; 10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; pg:unfollow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app --confirm &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;::NEW_DATABASE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; addons:attach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;::DATABASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --as&lt;&#x2F;span&gt;&lt;span&gt; OLD_DATABASE
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; pg:promote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; NEW_DATABASE
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; addons:detach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; NEW_DATABASE
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; addons:destroy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app --confirm &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; OLD_DATABASE
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; run:detached&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; rails runner &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Ops::Staging::Search.massacre!&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Routine to create a new DB with a deterministic name so that we can more
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# easily promote it later.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# There is also some logic here to recover from a build which got interrupted
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# mid-way so that we don&amp;#39;t accumulate orphaned DBs that we have to pay for.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;create &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;plan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;shift&lt;&#x2F;span&gt;&lt;span&gt; 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;existing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hapi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; &#x2F;addons&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;::DATABASE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -Mr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; .name)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hapi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; &#x2F;addons&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;::NEW_DATABASE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;jq -Mr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; .name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; addons:create \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;      -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; heroku-postgresql:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;plan &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;      --as&lt;&#x2F;span&gt;&lt;span&gt; NEW_DATABASE \
&lt;&#x2F;span&gt;&lt;span&gt;      $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;existing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; addons:detach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -a &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt; NEW_DATABASE
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;create &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;plan
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# already got a new one in waiting
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Takes a snapshot and copies it. This takes longer, breaks the destination
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# DB until it has completed, so is only used for demo to demo-staging, which
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# use Hobby DBs which cannot be followed&#x2F;forked.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# One benefit of this which might be worth applying to staging&#x2F;dev is that the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# destination data sizes (tables+indexes) are much smaller, which suits the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# smaller instance sizes used there.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;copy &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heroku&lt;&#x2F;span&gt;&lt;span&gt; pg:copy $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;::DATABASE NEW_DATABASE \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --wait-interval&lt;&#x2F;span&gt;&lt;span&gt; 10 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --app &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;    --confirm &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Create new DBs and trigger loading of data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt; covidence-dev     premium-0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --fork&lt;&#x2F;span&gt;&lt;span&gt; covidence-production::DATABASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --fast
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt; covidence-staging premium-2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --fork&lt;&#x2F;span&gt;&lt;span&gt; covidence-production::DATABASE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --fast
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt; covidence-demo-staging hobby-basic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt; covidence-demo covidence-demo-staging
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Promote DBs (these steps block until each DB to be ready for promotion)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;promote&lt;&#x2F;span&gt;&lt;span&gt; covidence-dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;promote&lt;&#x2F;span&gt;&lt;span&gt; covidence-staging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;promote&lt;&#x2F;span&gt;&lt;span&gt; covidence-demo-staging
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deploy a sub-directory as a branch</title>
		<published>2017-12-11T00:00:00+00:00</published>
		<updated>2017-12-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/deploy-directory-to-branch/" type="text/html"/>
		<id>https://bjeanes.com/posts/deploy-directory-to-branch/</id>
		<content type="html">&lt;p&gt;This post outlines a mechanism for using one branch as the source to generate a compiled artifact into another branch.
This is achieved without resorting to moving files around a working directory and staging dirty changes away safely, by
leveraging some neat internals of Git.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h3&gt;
&lt;p&gt;But first, why would someone want to do this?&lt;&#x2F;p&gt;
&lt;p&gt;In general, storing (deterministically) buildable artifacts in a repository can be unneccessary and even problematic.
For example: building a binary which can&#x27;t run on all platforms that might use the repository; or creating large files
which grow the repository size rapidly (e.g. JARs).&lt;&#x2F;p&gt;
&lt;p&gt;In the past, I have been in situations where using Git&#x27;s object model to storean immutable history of changes in
compiled outputs has been useful, inparticular for analytical purposes.&lt;&#x2F;p&gt;
&lt;p&gt;However, this time, the reason is rather mundane: GitHub&#x27;s Jekyll compilation whitelists certain plugins (for good,
security-related reasons) and I had set up this blog using a theme and plugin combination that apparently is not
compatible with GitHub-built Jekyll projects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how&quot;&gt;How&lt;&#x2F;h3&gt;
&lt;p&gt;GitHub expects to find source files for GitHub Pages deployment in either the &lt;code&gt;gh-pages&lt;&#x2F;code&gt; or &lt;code&gt;main&lt;&#x2F;code&gt; branch (depending on
whether its building a project page or a user&#x2F;org page). All that was necessary was to generate the compiled files into
that appropriate branch.&lt;&#x2F;p&gt;
&lt;p&gt;However, I did not want it to be up to the person making changes to the blog to have to remember to generate and commit
the generated files. In addition, it was important to me that the Git history of source changes was not conflated with
the adjacent need to store the compiled version.&lt;&#x2F;p&gt;
&lt;p&gt;That meant:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;As much automated as possible&lt;&#x2F;li&gt;
&lt;li&gt;The compiled branch (&lt;code&gt;main&lt;&#x2F;code&gt;, in this case) should be nothing but the generated files and a separate commit history.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;understanding-git-commit&quot;&gt;Understanding &lt;code&gt;git commit&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;When you run a command like &lt;code&gt;git commit .&lt;&#x2F;code&gt;, Git is doing a few of things of interest internally:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git-write-tree&lt;&#x2F;code&gt; stores the current state of your (staged) files as a tree&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git-commit-tree&lt;&#x2F;code&gt; creates a commit for that tree (and, usually, a parent
commit)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git-update-ref&lt;&#x2F;code&gt; Updating a ref (branch) to point to that new commit&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;By dropping down a level and taking control of these primitives directly, we can actually exercise a little bit more
control over what is in the commit and how that commit relates to the rest of the repository&#x27;s history.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;writing-a-tree-at-a-custom-root&quot;&gt;Writing a tree at a custom root&lt;&#x2F;h4&gt;
&lt;p&gt;The key ingredient that we will leverage is the &lt;code&gt;--prefix&lt;&#x2F;code&gt; flag to &lt;code&gt;git-write-tree&lt;&#x2F;code&gt;. This allows us to create a tree
object rooted at an arbitrary directory!&lt;&#x2F;p&gt;
&lt;p&gt;For example, compare the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#dcdfe4;&quot;&gt;&lt;code&gt;&lt;span&gt;$ git show $(git write-tree)
&lt;&#x2F;span&gt;&lt;span&gt;tree c97ce6b80599da62e34a684a245dec5df1228b8d
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.buildkite&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;.gitignore
&lt;&#x2F;span&gt;&lt;span&gt;CNAME
&lt;&#x2F;span&gt;&lt;span&gt;Gemfile
&lt;&#x2F;span&gt;&lt;span&gt;Gemfile.lock
&lt;&#x2F;span&gt;&lt;span&gt;_config.yml
&lt;&#x2F;span&gt;&lt;span&gt;_data&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;_drafts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;assets&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;index.html
&lt;&#x2F;span&gt;&lt;span&gt;pages&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ git show $(git write-tree --prefix pages)
&lt;&#x2F;span&gt;&lt;span&gt;tree 8e479816fadad469d16bcb16c24413feb780765f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;archive.html
&lt;&#x2F;span&gt;&lt;span&gt;category.html
&lt;&#x2F;span&gt;&lt;span&gt;tag.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;piecing-it-together&quot;&gt;Piecing it together&lt;&#x2F;h3&gt;
&lt;p&gt;The main caveat to account for is that &lt;code&gt;git-write-tree&lt;&#x2F;code&gt; will only write staged or committed files. I don&#x27;t want to keep
the built files in the source branch so I have the build directory ignored, which means those files are neither
committed nor staged.&lt;&#x2F;p&gt;
&lt;p&gt;To work around this, a &lt;code&gt;bin&#x2F;deploy&lt;&#x2F;code&gt; script temporarily stages the files for the duration of the commit building.
&lt;strong&gt;NOTE&lt;&#x2F;strong&gt;, because I am deploying to &lt;code&gt;main&lt;&#x2F;code&gt; branch, I configured the repository&#x27;s default branch to be &lt;code&gt;source&lt;&#x2F;code&gt; and the
&lt;code&gt;bin&#x2F;deploy&lt;&#x2F;code&gt; script lived there, along with all the Jekyll source files.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a simplified version of the script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;main&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;dist&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# This can be substituted for any command which builds artifacts to a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# specific directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bundle&lt;&#x2F;span&gt;&lt;span&gt; exec jekyll build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --destination &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build_dir
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Force the files to be added, regardless of .gitignore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -f &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build_dir
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Write tree to an object
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; write-tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Un-stage the build so it is back to being ignored
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt; -- &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;build_dir
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Create a new commit for that tree as a child of target branch&amp;#39;s commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; commit-tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Deploy&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Update the GitHub Pages&amp;#39; branch to the new commit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; update-ref refs&#x2F;heads&#x2F;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;commit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Push the compiled branch to GitHub
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;automated-builds&quot;&gt;Automated builds&lt;&#x2F;h3&gt;
&lt;p&gt;I used our existing &lt;a href=&quot;https:&#x2F;&#x2F;buildkite.com&quot;&gt;Buildkite&lt;&#x2F;a&gt; CI setup to quickly add a build which essentially just called
&lt;code&gt;bin&#x2F;deploy&lt;&#x2F;code&gt; to automatically deploy changes we made to GitHub (much the way that GitHub would automatically deploy
changes if I were committing directly to &lt;code&gt;main&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;gh-pages&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;some-changes-for-resilience&quot;&gt;Some changes for resilience&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I wanted to preserve committer&#x2F;authorship metadata for the deploy commits to make it clear whose latest change is
deployed. To handle this, the &lt;code&gt;bin&#x2F;deploy&lt;&#x2F;code&gt; script takes these details from the commit being built and sets some env
vars before we generate the deploy commit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_AUTHOR_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -s --format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;%an&amp;#39; HEAD)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_COMMITTER_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_AUTHOR_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_AUTHOR_EMAIL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -s --format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;%ae&amp;#39; HEAD)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_COMMITTER_EMAIL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GIT_AUTHOR_EMAIL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; commit-tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Deploy&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I wanted to make it clear which commit had been deployed, so I augmented the commit creation step to record a
description of the source commit in the commit message, including whether or not the working directory had uncommitted
changes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;identifier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; describe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --dirty --always&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# e.g. &amp;quot;213c9af&amp;quot;, &amp;quot;213c9a-dirty&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; commit-tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Deploy $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;identifier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;For maximum re-usability, I have the script detect the target branch based on the type of repository (project or
user&#x2F;org):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Determine which branch GitHub pages is built from, for this repository
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; config remote.origin.url)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;.github.io &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;.github.io.git &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;gh-pages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To still work in CI where a clean checkout has occurred without necessarily creating local branch refs, I use
long-form names (&lt;code&gt;refs&#x2F;remotes&#x2F;origin&#x2F;$branch&lt;&#x2F;code&gt; or &lt;code&gt;refs&#x2F;heads&#x2F;$branch&lt;&#x2F;code&gt;, as appropriate)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;result&quot;&gt;Result&lt;&#x2F;h3&gt;
&lt;p&gt;Feel free to have a look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bjeanes&#x2F;bjeanes.github.io&quot;&gt;repository for the blog&lt;&#x2F;a&gt;. The &lt;code&gt;main&lt;&#x2F;code&gt;
branch contains the history of deployed changes and the &lt;code&gt;source&lt;&#x2F;code&gt; branch contains the history of source changes.&lt;&#x2F;p&gt;
&lt;p&gt;This blog post was deployed in this manner.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;nobuoka&#x2F;d0f088df57d50e4cda1a&quot;&gt;Related gist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Makers &amp; Making</title>
		<published>2013-07-19T00:10:27+00:00</published>
		<updated>2013-07-19T07:06:16+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/makers-and-making/" type="text/html"/>
		<id>https://bjeanes.com/posts/makers-and-making/</id>
		<content type="html">&lt;p&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: I have moved to another city to start a new job because I believe that the best way that I can make
the world a better place is by making great tools to help other creative people do their best work possible.&lt;&#x2F;em&gt;&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Turning thought into reality quickly is what drew me to programming when I was young. There is such a raw and
incomparable power that you get when making things with code and with perfectly suited software tools.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;makers&quot;&gt;Makers&lt;&#x2F;h2&gt;
&lt;p&gt;A master cabinet maker can build the most ornate and beautiful cabinet with the simplest tools but it takes a long time
and mistakes are costly. When mistakes are costly and the creative process is extensive, the cabinet maker&#x27;s ability to
experiment and grow is hindered, and the quality can suffer as a result. With better tools, (s)he can be more
productive, experiment with new designs through prototyping, and improve their craft.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-for-makers&quot;&gt;Making for Makers&lt;&#x2F;h2&gt;
&lt;p&gt;I am a tool maker.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve known this for some time now. My deepest satisfaction in my work has come from making someone else&#x27;s job easier,
more productive, and, most importantly, more enjoyable.&lt;&#x2F;p&gt;
&lt;p&gt;The master cabinet maker is arguably adding value to the world, no matter their productivity. However, as a tool maker,
one has the ability to have a multiplicative effect on the world. By making tools for other makers the effect is
arguably exponential.&lt;&#x2F;p&gt;
&lt;p&gt;I want to help all makers experiment, grow, and, ultimately, make the world better.&lt;&#x2F;p&gt;
&lt;p&gt;Building great tools is quickly becoming my &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;36579366&quot;&gt;guiding principle&lt;&#x2F;a&gt;. I plan to do this by
remembering that &lt;a href=&quot;http:&#x2F;&#x2F;www.pechakucha.org&#x2F;channels&#x2F;table-xi&#x2F;presentations&#x2F;the-most-valuable-skill&quot;&gt;feedback is the most valuable
skill&lt;&#x2F;a&gt; to learning, growing, and
making and incorporating this concept into the tools that I build. Great tools provide actionable and specific feedback
quickly and directly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;heroku-makes-for-makers&quot;&gt;Heroku Makes for Makers&lt;&#x2F;h2&gt;
&lt;p&gt;Next Monday will be my first day at &lt;a href=&quot;https:&#x2F;&#x2F;www.heroku.com&quot;&gt;Heroku&lt;&#x2F;a&gt;. I&#x27;ve used Heroku in some form or another since it
was &lt;a href=&quot;https:&#x2F;&#x2F;blog.heroku.com&#x2F;archives&#x2F;2009&#x2F;1&#x2F;12&#x2F;whats_up_at_heroku&quot;&gt;an online code editor for Rails&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The moment I knew I was going to join Heroku was when I was allowed to sit in on one of their all hands, where I heard
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;teich&quot;&gt;Oren Teich&lt;&#x2F;a&gt; talk about Heroku&#x27;s guiding principle. More or less, he articulated my own
guiding principle of helping makers.&lt;&#x2F;p&gt;
&lt;p&gt;I couldn&#x27;t be more excited to start.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Talk: SSH Can Do That?</title>
		<published>2012-11-29T15:23:36+00:00</published>
		<updated>2012-11-29T15:24:24+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/talk-ssh-can-do-that/" type="text/html"/>
		<id>https://bjeanes.com/posts/talk-ssh-can-do-that/</id>
		<content type="html">&lt;p&gt;Last night I gave a talk on the darker side of SSH at &lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;ChicagoSC&#x2F;&quot;&gt;ChiSC meetup group&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a video version for those who are interested (sorry about the poor audio quality):&lt;&#x2F;p&gt;
&lt;iframe
    src=&quot;http:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;54505525?byline=0&amp;amp;portrait=0&amp;amp;badge=0&amp;amp;color=cc7833&quot;
    width=&quot;500&quot;
    height=&quot;281&quot;
    frameborder=&quot;0&quot;
    webkitAllowFullScreen
    mozallowfullscreen
    allowFullScreen
&gt;&lt;&#x2F;iframe&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Call Clojure function on a timer</title>
		<published>2012-09-20T16:07:00+00:00</published>
		<updated>2012-09-20T16:28:53+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/call-clojure-function-on-a-timer/" type="text/html"/>
		<id>https://bjeanes.com/posts/call-clojure-function-on-a-timer/</id>
		<content type="html">&lt;p&gt;In Clojure, I didn&#x27;t see a nice way to simply call a function on a timer (e.g. to poll for changes in another service).&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t find something in &lt;code&gt;clojure.core&lt;&#x2F;code&gt; to achieve this readily (but &lt;code&gt;clojure.core&lt;&#x2F;code&gt; is quite big, so I may have missed something obvious — let me know), so I whipped up the following to put in my project&#x27;s &lt;code&gt;util.clj&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;tick
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Call f with args every ms. First call will be after ms&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  [ms f &amp;amp; args]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;future
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span&gt;[f (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;repeatedly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt; f args))]
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Thread&#x2F;sleep&lt;&#x2F;span&gt;&lt;span&gt; ms)
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;tick-now
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Call f with args every ms. First call will be immediately (and blocking)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  [ms f &amp;amp; args]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt; f args)
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt; tick ms f args)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two variants. &lt;code&gt;tick&lt;&#x2F;code&gt; waits &lt;code&gt;ms&lt;&#x2F;code&gt; milliseconds and then calls &lt;code&gt;f&lt;&#x2F;code&gt; with &lt;code&gt;args&lt;&#x2F;code&gt; and repeats indefinitely. &lt;code&gt;tick-now&lt;&#x2F;code&gt; does the same thing except it calls &lt;code&gt;f&lt;&#x2F;code&gt; with &lt;code&gt;args&lt;&#x2F;code&gt; &lt;em&gt;before&lt;&#x2F;em&gt; starting the timer.&lt;&#x2F;p&gt;
&lt;p&gt;They are simple to use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;user=&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tick &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;; 500ms delay
&lt;&#x2F;span&gt;&lt;span&gt;hi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;; 500ms delay
&lt;&#x2F;span&gt;&lt;span&gt;hi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;; 500ms delay
&lt;&#x2F;span&gt;&lt;span&gt;hi
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my project, I&#x27;m using them like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;start-fetchers
&lt;&#x2F;span&gt;&lt;span&gt;  [api-token]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;future
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;[minutes (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;partial&lt;&#x2F;span&gt;&lt;span&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;60 1000&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tick-now &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                update-project-list!
&lt;&#x2F;span&gt;&lt;span&gt;                api-token)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tick-now &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;minutes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                fetch-milestones!
&lt;&#x2F;span&gt;&lt;span&gt;                api-token
&lt;&#x2F;span&gt;&lt;span&gt;                projects-to-fetch
&lt;&#x2F;span&gt;&lt;span&gt;                milestones-by-project))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pure Evil</title>
		<published>2012-09-07T04:31:19+00:00</published>
		<updated>2012-11-30T03:54:40+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/pure-evil/" type="text/html"/>
		<id>https://bjeanes.com/posts/pure-evil/</id>
		<content type="html">&lt;p&gt;I love Vim. I take that back — I love &lt;strong&gt;modal editing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Actually, I think very few people like &lt;em&gt;Vim&lt;&#x2F;em&gt;, it just happens to be the best kid on the block at modal editing. But,
after using Vim (and, God, does it take a while to learn to &lt;em&gt;use&lt;&#x2F;em&gt; it), you are reduced to a &lt;q&gt;&lt;a href=&quot;http:&#x2F;&#x2F;haldean.org&#x2F;docstore&#x2F;?vim-problems&quot;&gt;pathetic teary wreck
every time you have to use a text editor that isn&#x27;t vim&lt;&#x2F;a&gt;&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And why &lt;em&gt;is&lt;&#x2F;em&gt; it so debilitating to use something other than Vim for those who have honed their modal editing skills?
Frankly, magic sauce of Vim is (mostly) made up from a few quite simple ingredients: motions, text objects, operators.
There are plenty of cool tricks hidden inside Vim, but those three main things are the things you really miss,
consistently, when using something else.&lt;&#x2F;p&gt;
&lt;p&gt;Every now and then, when forced outside of the comforting (yet somehow cold) embrace of Vim, the Vimmer flirts with
Sublime Text 2’s &lt;a href=&quot;http:&#x2F;&#x2F;www.sublimetext.com&#x2F;docs&#x2F;2&#x2F;vintage.html&quot;&gt;vintage mode&lt;&#x2F;a&gt; or
&lt;a href=&quot;http:&#x2F;&#x2F;plugins.intellij.net&#x2F;plugin&#x2F;?id=164&quot;&gt;IdeaVIM&lt;&#x2F;a&gt;. We may even be impressed — but, eventually, something falls apart
and the abstraction leaks.&lt;&#x2F;p&gt;
&lt;p&gt;Usually, this failure happens because the Vi(m) emulation layer often doesn’t implement motions, text objects, and
operators. They just implement some keystrokes that appear to do the same thing in the same way — until you try
something the developer didn’t preempt.&lt;&#x2F;p&gt;
&lt;p&gt;If I could have an editor that did these things &lt;em&gt;properly&lt;&#x2F;em&gt;, I would have no real attachment to Vim. I have other things
about Vim that I love and would hate to lose but they aren’t unique and other editors (can) have them, too.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily for me, I’ve been doing too much Clojure to ignore Emacs forever and 2 weeks ago, I switched. Here&#x27;s how it
played out:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nope — not for me... But, wait! Let us try this &lt;a href=&quot;http:&#x2F;&#x2F;emacswiki.org&#x2F;emacs&#x2F;Evil&quot;&gt;Evil Mode&lt;&#x2F;a&gt; so we can mock their
pitiful attempt at modal editing (&lt;em&gt;evil laugh here&lt;&#x2F;em&gt;).  What’s this‽ It’s actually good!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Inner dialogs aside, I’m not kidding; Evil Mode is stunning. It doesn’t have &lt;em&gt;everything&lt;&#x2F;em&gt; — but everything that it does
have is built up using the same &lt;strike&gt;functions&lt;&#x2F;strike&gt; macros that you can use to extend it. Those are:
&lt;code&gt;(evil-define-state)&lt;&#x2F;code&gt; (“mode” is an existing term in Emacs so what Vim calls modes, Evil Mode calls “states”),
&lt;code&gt;(evil-define-motion)&lt;&#x2F;code&gt;, &lt;code&gt;(evil-define-operator)&lt;&#x2F;code&gt;, &lt;code&gt;(evil-define-text-object)&lt;&#x2F;code&gt;, and a &lt;a href=&quot;https:&#x2F;&#x2F;gitorious.org&#x2F;evil&#x2F;evil&#x2F;blobs&#x2F;raw&#x2F;doc&#x2F;doc&#x2F;evil.pdf&quot;&gt;few
others&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Evil Mode correctly implements the plumbing to wire these things together so that the Vim “language” which becomes
natural and reflexive (e.g. &lt;code&gt;di”&lt;&#x2F;code&gt; -&amp;gt; “&lt;strong&gt;d&lt;&#x2F;strong&gt;elete &lt;strong&gt;i&lt;&#x2F;strong&gt;nside double quotes”, &lt;code&gt;vt &lt;&#x2F;code&gt; -&amp;gt; “&lt;strong&gt;v&lt;&#x2F;strong&gt;isually select &lt;strong&gt;t&lt;&#x2F;strong&gt;ill
space`) is completely preserved. If you wanted to define a new text object (e.g. a Ruby block), it is trivial to do so
and all of the motions and operators will work flawlessly with it immediately. Frankly, it’s not even that nice in Vim.&lt;&#x2F;p&gt;
&lt;p&gt;At the end of the day, I’ve always hated things like VimScript and Vim’s single-threadedness but I could never walk away
from a truly powerful (and mostly extensible) modal editing system. Now, that has changed; I get ELisp (which, for all
its faults, is exponentially better than VimScript), a saner package system, and a level of extensibility that, by
design, can never be matched by Vim. All that and I don’t have to give up modal editing? Hell yes!&lt;&#x2F;p&gt;
&lt;p&gt;Bonus points: one of the “states” that Evil implements is an Emacs state; this leaves Emacs and all it’s default
behavior and keymappings 100% intact, meaning you can pair fearlessly with Emacsen, or slowly learn more about the Emacs
way of doing things, if desirable.&lt;&#x2F;p&gt;
&lt;p&gt;So far, I’ve rarely noticed I’m not in Vim and am constantly surprised when I employ Vim reflexes in Emacs and they work
&lt;em&gt;exactly&lt;&#x2F;em&gt; as expected or better (seriously, try &lt;code&gt;:%s&#x2F;foo&#x2F;bar&#x2F;g&lt;&#x2F;code&gt; in Evil mode and tell me you don’t squeal with joy).&lt;&#x2F;p&gt;
&lt;p&gt;I refuse to pick a single side, so I’m picking both. I’m going to edit modally in Emacs and I’m going to be happy doing
it! I don’t care if I simultaneously piss off Vim users and Emacs users — hell, they need more things in common
anyway...&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Happier as a Hacker</title>
		<published>2012-09-06T00:22:42+00:00</published>
		<updated>2022-11-26T00:22:42+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/happier-as-a-hacker/" type="text/html"/>
		<id>https://bjeanes.com/posts/happier-as-a-hacker/</id>
		<content type="html">&lt;p&gt;I’ve grown a lot in the last few years, personally and, specifically, in my career. My values have changed and it’s
affected the way I think and work.&lt;&#x2F;p&gt;
&lt;p&gt;There has been a gradual progression towards caring more and more about the Right Way™ to do things. For example, more
than ever before, I value simplicity and clarity over ease and cleverness (an epidemic that greatly afflicts the Ruby
community, in my opinion).&lt;&#x2F;p&gt;
&lt;p&gt;But, these values have come at a cost to me. Somewhere along the way, I complacently let &lt;em&gt;getting it right&lt;&#x2F;em&gt; become far
more important than &lt;em&gt;getting it done&lt;&#x2F;em&gt;.” Don’t get me wrong, getting things right is very important — where I went wrong
was valuing getting it right the &lt;strong&gt;first&lt;&#x2F;strong&gt; time.&lt;&#x2F;p&gt;
&lt;p&gt;It may not plague others to the extent that it has me, but this misplaced obsession has gotten in the way of progress.
It’s caused a type of analysis paralysis not unlike writers’ block; I discard ideas and directions too early because
they aren’t “good enough.” But exploring a potentially bad direction is still being better than having no direction
— which is the only place you end up when you discard ideas before they have a chance to blossom.&lt;&#x2F;p&gt;
&lt;p&gt;In the eternal words of &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Into_the_Woods&quot;&gt;Little Red Ridinghood&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Isn&#x27;t it nice to know a lot?
And a little bit not.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I was happier as a hacker, blissfully ignorant as I was, because I got things done.&lt;&#x2F;p&gt;
&lt;p&gt;It’s time to become a hacker again; it’s time to be creative and explorative, and work towards &lt;em&gt;approximating&lt;&#x2F;em&gt; the Right
Way™, iteratively. Truly, this is one of the great realizations of Agile — focus on progress instead of planning and
pre-empting every possible outcome.&lt;&#x2F;p&gt;
&lt;p&gt;I can’t forget that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Narrator&lt;&#x2F;strong&gt;: He forgot that. [ed: 2022]&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Motivate your lazy sequences</title>
		<published>2012-09-03T18:00:53+00:00</published>
		<updated>2012-09-04T00:17:41+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/motivate-your-lazy-sequences/" type="text/html"/>
		<id>https://bjeanes.com/posts/motivate-your-lazy-sequences/</id>
		<content type="html">&lt;p&gt;I &lt;em&gt;love&lt;&#x2F;em&gt; Clojure’s laziness.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I’ve been using &lt;code&gt;lazy-seq&lt;&#x2F;code&gt;  to consume remote collections via APIs, fetching pages of data transparently and only as needed. &lt;a href=&quot;http:&#x2F;&#x2F;gfredericks.com&#x2F;&quot;&gt;Gary Fredericks&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;mikelikesbikes.com&#x2F;&quot;&gt;Mike Busch&lt;&#x2F;a&gt;, and I applied this to a project of ours that had to crunch tens of thousands of records from Salesforce. I’m also doing something similar with a personal project that has to fetch a lot of Pivotal Tracker stories to &lt;code&gt;reduce&lt;&#x2F;code&gt; them.&lt;&#x2F;p&gt;
&lt;p&gt;In cases like these, consuming (potentially unbounded) resources in a lazy manner allows one to start processing data earlier and to make as few requests as possible to get only the data you need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mostly-lazy&quot;&gt;&lt;em&gt;Mostly&lt;&#x2F;em&gt; Lazy&lt;&#x2F;h2&gt;
&lt;p&gt;I want to talk about a neat little thing I did in my project to get a nice little performance boost on top of this laziness, without having to think about any low-level concurrency concerns.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;laziness&quot;&gt;Laziness&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s a piece of code that provides an “infinite” lazy sequence. In this case, it is of tweets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;[clj-http.client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:as&lt;&#x2F;span&gt;&lt;span&gt; http])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;tweets-for
&lt;&#x2F;span&gt;&lt;span&gt;  ([user] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tweets-for&lt;&#x2F;span&gt;&lt;span&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  ([user last-tweet-id]
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lazy-seq
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;[url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;api.twitter.com&#x2F;1&#x2F;statuses&#x2F;user_timeline.json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            params {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:limit 10 :screen_name&lt;&#x2F;span&gt;&lt;span&gt; user}
&lt;&#x2F;span&gt;&lt;span&gt;            params (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; last-tweet-id (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;assoc&lt;&#x2F;span&gt;&lt;span&gt; params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:max_id&lt;&#x2F;span&gt;&lt;span&gt; last-tweet-id) params)
&lt;&#x2F;span&gt;&lt;span&gt;            response (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;http&#x2F;get&lt;&#x2F;span&gt;&lt;span&gt; url {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:query-params&lt;&#x2F;span&gt;&lt;span&gt; params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:as :json&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;            tweets (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:body&lt;&#x2F;span&gt;&lt;span&gt; response)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;not-empty&lt;&#x2F;span&gt;&lt;span&gt; tweets)
&lt;&#x2F;span&gt;&lt;span&gt;          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;concat&lt;&#x2F;span&gt;&lt;span&gt; tweets
&lt;&#x2F;span&gt;&lt;span&gt;                  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tweets-for&lt;&#x2F;span&gt;&lt;span&gt; user (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:id &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt; tweets)))))))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So that’s cool. Now, note the following performance characteristics when contemplating the next section:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;my-tweets &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tweets-for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;bjeanes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;; The following returns after a delay while we fetch the first page:
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt; my-tweets) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;=&amp;gt; {:text &amp;quot;Tweet 0&amp;quot; ...}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;; This returns instantly because our `tweets-for` function fetches 10 tweets per page:
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt; my-tweets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;=&amp;gt; {:text &amp;quot;Tweet 9&amp;quot; ...}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;; This returns after a delay because this tweet is on the next (still lazily unfetched) page:
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt; my-tweets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;=&amp;gt; {:text &amp;quot;Tweet 10&amp;quot; ...}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h3&gt;
&lt;p&gt;So laziness is pretty cool. But, sometimes, things can improve if you are ever so slightly less lazy. What if we could remove that little pause between the 9th and the 10th items in the list where we are just waiting around for the network request to Twitter to complete? We could be using our time to do more CPU-melting tweet crunching! Well, it turns out we can easily do it.&lt;&#x2F;p&gt;
&lt;p&gt;Assume for a moment that we have some calculation (&lt;code&gt;process&lt;&#x2F;code&gt;) that takes a considerable amount of CPU time to process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;process
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Do some really hard work with our tweets&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  [tweets]
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Thread&#x2F;sleep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;) tweets))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we know we will be consuming a substantial amount of the lazy sequence, we could encourage the sequence to go ahead and start realizing the next chunk of our sequence.&lt;&#x2F;p&gt;
&lt;p&gt;This would mean that instead of processing 10 tweets, waiting, processing 10 tweets, waiting, etc.:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bjeanes.com&#x2F;posts&#x2F;motivate-your-lazy-sequences&#x2F;lazy.png&quot; alt=&quot;Diagram of lazy sequencing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;... we would be able to process tweets continuously back-to-back:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bjeanes.com&#x2F;posts&#x2F;motivate-your-lazy-sequences&#x2F;motivated.png&quot; alt=&quot;Diagram showing the &amp;quot;motivated&amp;quot; sequencing&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wouldn&#x27;t also be great if we didn&#x27;t have to think about the parallelism at all? To this end, I present &lt;code&gt;motivate&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;motivate
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Motivate a lazy sequence to seek slightly ahead of the sequence consumer&amp;#39;s position.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ([coll] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;motivate&lt;&#x2F;span&gt;&lt;span&gt; coll &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  ([coll motivation]
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lazy-seq
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;future &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt; coll motivation))
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt; coll) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;motivate &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rest&lt;&#x2F;span&gt;&lt;span&gt; coll) motivation)))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s compare:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;clojure&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-clojure &quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;process &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;take &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tweets-for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;riblah&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;=&amp;gt; “Elapsed time: 11545.011 msecs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;process &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;take &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;motivate &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tweets-for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;riblah&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;;=&amp;gt; &amp;quot;Elapsed time: 10394.769 msecs&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The speed difference is noticeable even when processing only a 100 tweets. If we were doing more than 100 milliseconds&#x2F;tweet of processing, fetching a lot more data, or dealing with a slow upstream dependency, the speed improvements would be even clearer.&lt;&#x2F;p&gt;
&lt;p&gt;The last (optional) parameter to &lt;code&gt;motivate&lt;&#x2F;code&gt; is the “motivation factor”. If your CPU-bound work is long-running, this number can be smaller without a noticeable difference. The ideal number depends on how long each IO operation takes and much processing you do with each chunk.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, the motivation you give to the lazy sequence is a trade-off between waiting for IO and wasting IO; that is, the lower the number, the more likely you are to wait on IO but the higher the number, the more IO you’ll perform unnecessarily (at least, if you aren’t guaranteed to consume the whole sequence.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this is handy to someone else out there. I wouldn’t at all be surprised if something like this already existed (&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt; Yup: &lt;a href=&quot;http:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure_core&#x2F;clojure.core&#x2F;seque&quot;&gt;&lt;code&gt;seque&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) or if this completely obvious to seasoned Clojurian, but it was a pleasant moment discovering this possibility on my own.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Factories breed complexity</title>
		<published>2012-02-26T19:22:56+00:00</published>
		<updated>2012-03-06T05:26:08+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/factories-breed-complexity/" type="text/html"/>
		<id>https://bjeanes.com/posts/factories-breed-complexity/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Important: A big aspect of this post was the comments. My new blog doesn&#x27;t have comments so until I find a way to
capture them here, please &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20220528193024&#x2F;https:&#x2F;&#x2F;bjeanes.com&#x2F;2012&#x2F;02&#x2F;factories-breed-complexity#comments&quot;&gt;view the old version via Wayback
Machine&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Having maintainable code is great. Maintainable code allows you to deliver improvements faster, happier, and more
reliably.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, the measures that developers need to take and the strategies that we have to employ to achieve maintainable
code have been understood for years, if not decades. Especially in the realm of object-oriented programming, but
certainly not exclusively, most of these principles boil down to reducing coupling and system complexity. A system whose
parts are coupled as loosely as possible is a modular system; the parts know little of each other and a lot about
themselves and they have thin and specific interfaces between each other.&lt;&#x2F;p&gt;
&lt;p&gt;Test-driven development is one of the many tools at a developer&#x27;s disposal to achieve code quality. Unfortunately, there
is a lot of naïveté around the benefits of TDD. A lot of developers see TDD as primarily a tool for verifying system
correctness. While TDD does of course offer this benefit, and arguably better than retroactive automated testing, the
real benefit of TDD is that it offers short feedback loops that guide the design&#x2F;architecture of the system.&lt;&#x2F;p&gt;
&lt;p&gt;Since it is accepted that a loosely-coupled modular system is a simpler system, it stands that tools, such as TDD, which
guide a design towards modularity and simplicity are good tools. A module that is tightly coupled to another is not
easily tested in isolation. However, if the isolated tests are written first, it is difficult to write a passing
implementation for that module that maintains such a low degree of coupling. Therefore, good TDD should guide you
towards a simpler design (though it is certainly not the only way).&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, factories work against this goal. Factories debilitate TDD&#x27;s ability to give you feedback into the
complexity of your design.&lt;&#x2F;p&gt;
&lt;p&gt;To be clear, I am not talking about the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Factory_method_pattern&quot;&gt;Factory Method Pattern&lt;&#x2F;a&gt; or
the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Abstract_factory_pattern&quot;&gt;Abstract Factory Pattern&lt;&#x2F;a&gt; — both of which can be described
as ways to &lt;q src=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_creation#Creating_objects&quot;&gt;decouple a particular implementation
of an object from code for the creation of such an object&lt;&#x2F;q&gt;
(&lt;cite&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_creation#Creating_objects&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt;). Instead, I am talking about
the &amp;quot;factories&amp;quot; for replacing fixtures in tests — something which has seemingly obsessed the Ruby (Rails, especially)
community. The two primary Ruby libraries for factory-based fixture replacement are
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thoughtbot&#x2F;factory_girl&quot;&gt;factory_girl&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;notahat&#x2F;machinist&quot;&gt;Machinist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A tool such as Machinist or factory_girl &lt;q&gt;generates data for the attributes you don&#x27;t care about, and constructs any
necessary associated objects, leaving you to specify only the fields you care about in your test&lt;&#x2F;q&gt; (from Machinist&#x27;s
own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;notahat&#x2F;machinist&#x2F;blob&#x2F;master&#x2F;README.markdown&quot;&gt;README file&lt;&#x2F;a&gt;). This sounds nice at first, because
it makes your tests more readable and relevant. However, behind the scenes, these tools are still creating other objects
and entities and introducing them into your test environment. By having data and objects in tests that are irrelevant to
the functionality that is being tested (in &lt;em&gt;isolation&lt;&#x2F;em&gt;, remember), a developer creates an environment that permits, if
not invites, silent dependencies to creep into an implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, and perhaps more significantly, by creating objects (and usually entire &lt;em&gt;hierarchies&lt;&#x2F;em&gt; of objects) with such
ease and opacity, you are outright masking the dependencies (*cough* complexity *cough* coupling) between your
implementation and those entities. If forced to stub out all those intricacies, the system complexity would be
screamingly obvious and a developer would quickly avail herself of a rewrite to reduce complexity or thin out the
interface.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of having feedback that guides a developer to simplicity, fixture factories seem to guide developers to
complexity by masking dependencies as one-line simplicity. In fact, that one (or five, whatever) line setup is a shotgun
blast of environmental dependencies that are hidden from the architect. That complexity will come back for revenge after
being ignored for so long.&lt;&#x2F;p&gt;
&lt;p&gt;It seems that factory_girl and Machinist exist to make testing components more convenient. This is, at face value, an
admirable and desirable goal. However, in unit tests, the cost is too high for any system of considerable size.&lt;&#x2F;p&gt;
&lt;p&gt;Please, do the right thing and avoid the convenience and &amp;quot;fun&amp;quot; of the factory_girl temptress. You will trend towards a
simpler system and as a bonus (in fact, an incredible one) your test suite will likely be exponentially faster which, in
turn, will breed simplicity by letting you have more feedback more often.&lt;&#x2F;p&gt;
&lt;p&gt;P.S. It shouldn&#x27;t go without mention that factories can be absolutely awesome for integration tests. Integration tests
aren&#x27;t used for guiding system design nor testing in isolation so the drawbacks of these tools drop away. However, both
factory_girl and Machinist use RSpec as some of their very first usage examples and this troubles me deeply.&lt;&#x2F;p&gt;
&lt;p&gt;P.P.S. A lot of these arguments can be applied to fixtures too. However, they usually don&#x27;t create hordes of objects
invisibly and litter your environment with them. Also, they aren&#x27;t as slow. But yes, the fewer factories &lt;em&gt;and&lt;&#x2F;em&gt; fixtures
in a test, the better.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update for clarity&lt;&#x2F;strong&gt;: Firstly, I am absolutely just talking about unit tests. If you are testing code that
&lt;em&gt;integrates&lt;&#x2F;em&gt; with ActiveRecord or number of levels of your stack, then factories and fixtures are certainly defensible
(though I still prefer to steer clear). Secondly, I&#x27;ve tried to be careful about where I use the words simple, easy,
complex, and difficult. For the definitions that I intend, please watch (at least the first 10 minutes of) &lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made
Easy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hell yes</title>
		<published>2011-07-11T04:53:55+00:00</published>
		<updated>2011-08-28T21:26:39+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/hell-yes/" type="text/html"/>
		<id>https://bjeanes.com/posts/hell-yes/</id>
		<content type="html">&lt;p&gt;Although long overdue, I’m here to tell you why I joined Obtiva and why I think you should too.&lt;&#x2F;p&gt;
&lt;p&gt;About 10 months ago, I found myself looking for a job. I had plenty of freelance work and plenty of time to find the
right fit for myself. With this in mind, I decided to adopt a new philosophy to apply in situations like this.&lt;&#x2F;p&gt;
&lt;p&gt;I realised that you don’t always get the full potential out of life until you &lt;strong&gt;face up to what you really want&lt;&#x2F;strong&gt; out of
it.&lt;&#x2F;p&gt;
&lt;p&gt;The core principle of this outlook was inspired by reading &lt;a href=&quot;http:&#x2F;&#x2F;sivers.org&#x2F;hellyeah&quot;&gt;a fantastic blog post&lt;&#x2F;a&gt; that had
one message: If you can’t say “HELL YEAH!” to something, just say “No” instead.&lt;&#x2F;p&gt;
&lt;p&gt;This message resonated with me and helped me considerably to get what I really wanted out of the next few months. I knew
that what I really wanted more than anything was to work with incredible people who inspired and challenged me on a
daily basis. I knew then and still do now that if this basic need wasn’t met, I’d be looking for a new job within a few
months.&lt;&#x2F;p&gt;
&lt;p&gt;I knew that to make the best of my time, I had to take my time. I put the word out to the world (via a &lt;a href=&quot;http:&#x2F;&#x2F;bjeanes.com&#x2F;2010&#x2F;08&#x2F;19&#x2F;my-future&quot;&gt;blog
post&lt;&#x2F;a&gt;) stating what I wanted and began networking and contacting companies I
thought I’d like.&lt;&#x2F;p&gt;
&lt;p&gt;One of the first things I did when I got on the phone with any potential employer was to tell them that I would not be
accepting any jobs immediately. I wanted to take at least a few months to get a good feel for the work places and the
people of which they were comprised.&lt;&#x2F;p&gt;
&lt;p&gt;I was contacted by nine fantastic opportunities across the world. They included opportunities in Sweden, Spain, Mexico,
the USA, Canada, and my home, Australia.&lt;&#x2F;p&gt;
&lt;p&gt;With each opportunity, I stated that I wanted to come to their office (anywhere in the world) and spend a week working
with the people who would become my coworkers and on the projects that I would be a part of.&lt;&#x2F;p&gt;
&lt;p&gt;After several experiences at different locations, I had the pleasure of spending a week in Chicago with the Obtivians.
Finally, this was a place I knew I wanted to work at. Obtiva has some of the most amazing people I’ve had the pleasure
of getting to know. Each of them is smart, passionate, interesting, modest, and inspiring. I knew I could only come out
the other end of working with them a better developer and human being than before.&lt;&#x2F;p&gt;
&lt;p&gt;Several of my visits with offices prior to Obtiva felt like interesting and challenging places to work at, but none of
them gave me an overwhelming sensation of happiness and excitement as Obtiva did and still does.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately, I don’t plan on being a consultant for most of my career, but I know that as long as I am one, I want to be
one with these guys.&lt;&#x2F;p&gt;
&lt;p&gt;So, face up to what you want. Say no until you are moved to say yes as though by an external force (other than
coercion!). There&#x27;s no room for compromising on happiness, fulfillment, and personal growth.&lt;&#x2F;p&gt;
&lt;p&gt;Also, Obtiva kicks ass. If you are a passionate developer or have an interesting project, drop us a line, and let us
move you to say &amp;quot;HELL YES!&amp;quot;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Selector-Free Cucumber Scenarios</title>
		<published>2010-09-19T13:53:00+00:00</published>
		<updated>2013-03-14T15:37:12+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/selector-free-cucumber-scenarios/" type="text/html"/>
		<id>https://bjeanes.com/posts/selector-free-cucumber-scenarios/</id>
		<content type="html">&lt;p&gt;&lt;small&gt;(a Serbo-Croation translation by Anja Skrbaa is available &lt;a href=&quot;http:&#x2F;&#x2F;science.webhostinggeeks.com&#x2F;selektor-free&quot;&gt;here&lt;&#x2F;a&gt;)&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been using Cucumber since pretty much the first day I heard about it. I’ve worked on a lot of projects that have
relied on it’s presence for reliable development. Therefore, I’ve put a lot of effort into perfecting my Cucumber
infrastructure to make this fantastic tool even better. I’m going to share one such morsel of code that makes developing
with Cucumber even greater.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve worked on a lot of web applications and, as I’m sure many of you know, quite often the development of a web
application is focussed on the functionality foremost, and the interface and style is incorporated later. It may be that
the client doesn’t yet know the feel they want for their project or that they want to focus their budget towards
prototyping the application first.&lt;&#x2F;p&gt;
&lt;p&gt;This is fine, except for the fact that changing the HTML and CSS of a web application after a lot of functionality has
been developed is a fantastic way to break all your integration tests.&lt;&#x2F;p&gt;
&lt;p&gt;This is particularly true if you have scenarios like the following contrived one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#dcdfe4;&quot;&gt;&lt;code&gt;&lt;span&gt;When I fill in &amp;quot;Username&amp;quot; with &amp;quot;bjeanes&amp;quot; within &amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;And I press &amp;quot;Sign up!&amp;quot; within &amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Then I should see &amp;quot;You have successfully signed up&amp;quot; within &amp;quot;.flash.notice&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is, of course, that designers might change the HTML that used to be &lt;code&gt;.main-panel form#signup-form&lt;&#x2F;code&gt; into
something sexier and more semantic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;This problem is not unlike an already-solved one; we’ve all moved away from hardcoding URLs like &amp;quot;&#x2F;users&#x2F;new&amp;quot; into our
views and Cucumber scenarios and replacing them with &lt;code&gt;new_user_path&lt;&#x2F;code&gt; and &lt;code&gt;the signup page&lt;&#x2F;code&gt;, respectively.&lt;&#x2F;p&gt;
&lt;p&gt;So why not apply the same formula that &lt;code&gt;paths.rb&lt;&#x2F;code&gt; uses for removing URLs from scenarios to our situation with selectors?&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what I add to all new projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# I&amp;#39;m in features&#x2F;step_definitions&#x2F;web_ext_steps.rb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^(.*) within ([^:&amp;quot;]+)$&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  with_scope(selector_for(scope)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When&lt;&#x2F;span&gt;&lt;span&gt; step
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Multi-line version of above
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^(.*) within ([^:&amp;quot;]+):$&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table_or_string&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  with_scope(selector_for(scope)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;#{step}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, table_or_string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# I&amp;#39;m in features&#x2F;support&#x2F;selectors.rb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;HtmlSelectorsHelper
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;selector_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; scope
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the body&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;html &amp;gt; body&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Can&amp;#39;t find mapping from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;#{scope}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; to a selector.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Now, go and add a mapping in &lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;World&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HtmlSelectorsHelper&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;applying-the-solution&quot;&gt;Applying the Solution&lt;&#x2F;h2&gt;
&lt;p&gt;My previous example of the flawed Cucumber scenario now becomes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When I&lt;&#x2F;span&gt;&lt;span&gt; fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;bjeanes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the sign up form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;And I&lt;&#x2F;span&gt;&lt;span&gt; press &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Sign up!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the sign up form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Then I&lt;&#x2F;span&gt;&lt;span&gt; should see &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;You have successfully signed up&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the notice flash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the &lt;code&gt;selectors.rb&lt;&#x2F;code&gt; case statement gets the following additions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the sign up form&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the (notice|error|info) flash&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.flash.&lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;$1&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the scenario now identifies things on our page by their semantic identifiers, not by brittle CSS or XPath
locations which are prone to change. As a bonus, now &lt;del&gt;if&lt;&#x2F;del&gt; when they do change, the paths only need to be
updated in a single location in our Cucumber test suite!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;patching-cucumber&quot;&gt;Patching Cucumber&lt;&#x2F;h2&gt;
&lt;p&gt;I feel pretty strongly that CSS and XPath don’t belong in our feature files because not only does it encourage brittle
tests (as shown above), but also because those selectors are entirely irrelevant to end users, and that’s kind of the
main point of using a natural language DSL to describe our integration tests, i.e. putting on the user shoes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;I’d really like to patch this back into Cucumber, and I entirely plan to do so, providing I get the time.&lt;&#x2F;del&gt;
I got the time, and here is my &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;aslakhellesoy&#x2F;cucumber-rails&#x2F;pull&#x2F;63&quot;&gt;pull request&lt;&#x2F;a&gt; to have it merged.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expanding-the-solution&quot;&gt;Expanding the Solution&lt;&#x2F;h2&gt;
&lt;p&gt;You’ll note my &lt;code&gt;HtmlSelectorsHelper&lt;&#x2F;code&gt; module only accommodates CSS selectors. That’s only because I have never needed
XPath in this context. It’d be very simple to modify my examples to do so, though, with a combination of multiple return
values and a splat. That’s an exercise for the reader (or me if I end up patching Cucumber).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-word&quot;&gt;Final Word&lt;&#x2F;h2&gt;
&lt;p&gt;I apologise for the length of this article, but I congratulate you for making it all the way through it!&lt;&#x2F;p&gt;
&lt;p&gt;I now have so many blog post ideas lined up that I’ve had to create a new category in Things.app just to hold them all.
This means that I’ll be striving to get a few more posts done and out the door in the next few weeks, including a
performance comparison of different data encapsulations for web application APIs on the iPhone (i.e. is it better to use
Plists, JSON, or XML?) and a post on why I think there should be 8 RESTful actions, not the 7 that Rails prescribes by
default.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Iterative HTML5 - Turning a comma-separated list into a semantic list</title>
		<published>2009-11-12T06:42:00+00:00</published>
		<updated>2011-08-28T21:04:52+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/iterative-html5-turning-a-comma-separated-list-into-a-semantic-list/" type="text/html"/>
		<id>https://bjeanes.com/posts/iterative-html5-turning-a-comma-separated-list-into-a-semantic-list/</id>
		<content type="html">&lt;p&gt;In the process of going through the redesign of our company website, I keep finding better ways to make the HTML more
semantic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chen.do&quot;&gt;Jack Chen&lt;&#x2F;a&gt; and I have been turning the design into HTML over the last few days and we’ve been
striving to be as semantic as possible by taking advantage of new HTML5 elements and by separating the content further
from the design code with all the new CSS3 selectors.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example of something we just did to make the HTML cleaner and more meaningful, whilst still maintaining the
look and style.&lt;&#x2F;p&gt;
&lt;p&gt;Usually your HTML (or HAML in this case) would look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haml&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-haml &quot;&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;footer
&lt;&#x2F;span&gt;&lt;span&gt;  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aside
&lt;&#x2F;span&gt;&lt;span&gt;    = link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Dr Nic Williams&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;github.com&#x2F;drnic&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ,
&lt;&#x2F;span&gt;&lt;span&gt;    = link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Bo Jeanes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;http:&#x2F;&#x2F;bjeanes.com&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ,
&lt;&#x2F;span&gt;&lt;span&gt;    = link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Jack Chen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;chen.do&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    ,
&lt;&#x2F;span&gt;&lt;span&gt;    = link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Ryan Bigg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;ryanbigg.com&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, we can make this &lt;strong&gt;list&lt;&#x2F;strong&gt; of people more semantic by using an &lt;code&gt;&amp;lt;ul&amp;gt;&lt;&#x2F;code&gt; element and some CSS magic.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what the new HTML (HAML here) would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haml&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-haml &quot;&gt;&lt;code class=&quot;language-haml&quot; data-lang=&quot;haml&quot;&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;footer
&lt;&#x2F;span&gt;&lt;span&gt;  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aside
&lt;&#x2F;span&gt;&lt;span&gt;    %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ul
&lt;&#x2F;span&gt;&lt;span&gt;      %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;= link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Dr Nic Williams&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;github.com&#x2F;drnic&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;= link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Bo Jeanes&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;bjeanes.com&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;= link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Jack Chen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;chen.do&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;li&lt;&#x2F;span&gt;&lt;span&gt;= link_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Ryan Bigg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;ryanbigg.com&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the CSS (Sass here):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sass&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-sass &quot;&gt;&lt;code class=&quot;language-sass&quot; data-lang=&quot;sass&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;body
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;footer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aside
&lt;&#x2F;span&gt;&lt;span&gt;      padding-top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;px
&lt;&#x2F;span&gt;&lt;span&gt;      float: left
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ul
&lt;&#x2F;span&gt;&lt;span&gt;        list-style: none
&lt;&#x2F;span&gt;&lt;span&gt;        margin: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;li
&lt;&#x2F;span&gt;&lt;span&gt;          display: inline
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;          &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;after
&lt;&#x2F;span&gt;&lt;span&gt;            content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;,&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;          &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;last-child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;after
&lt;&#x2F;span&gt;&lt;span&gt;            content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using partial layouts to DRY out your views</title>
		<published>2009-11-05T00:59:00+00:00</published>
		<updated>2011-08-28T21:28:55+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-partial-layouts-to-dry-out-your-views/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-partial-layouts-to-dry-out-your-views/</id>
		<content type="html">&lt;p&gt;The other day we got some HTML from the designer of one of our clients to implement as the new UI for an app we are
building at work. Overall the HTML was good but implementing it started to feel like I was repeating myself.&lt;&#x2F;p&gt;
&lt;p&gt;For example, around all the apps form the client’s design had a rounded white box, the HTML of which went something like
this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;content-wht&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;content-wht-inside&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fieldset&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;frow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Currency:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;fs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;EUR&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;frow frlast&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;File:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fieldset&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cround&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;align&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;center&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;images&#x2F;round-corners-bottom.gif&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s a lot of &lt;code&gt;div&lt;&#x2F;code&gt; tags to have to repeat around every form that has this style. Luckily a nice feature of Rails
partials can help out.  Create a shared partial file that will act as a layout like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;erb&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-erb &quot;&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&amp;lt;!-- app&#x2F;views&#x2F;shared&#x2F;_fieldset.html.erb --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;content-wht&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;content-wht-inside&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fieldset&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;%= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fieldset&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cround&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;align&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;center&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;images&#x2F;round-corners-bottom.gif&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in your views that need to have this white box, simply wrap your content in that layout like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;erb&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-erb &quot;&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span&gt;&amp;lt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;render &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:layout &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;shared&#x2F;fieldset&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;frow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Currency:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;fs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;EUR&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;option&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;frow frlast&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;File:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;file&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&amp;lt;!-- Or, if the inner content is already in a partial --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;%= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;render&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:partial &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;form&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:layout &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;shared&#x2F;fieldset&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using Fish shell&#x27;s event system to behave like method_missing</title>
		<published>2009-10-07T09:07:00+00:00</published>
		<updated>2011-08-28T21:03:23+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-fish-shells-event-system-to-behave-like-method-missing/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-fish-shells-event-system-to-behave-like-method-missing/</id>
		<content type="html">&lt;p&gt;Dr Nic’s latest post, &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20170911072928&#x2F;http:&#x2F;&#x2F;drnicwilliams.com&#x2F;2009&#x2F;10&#x2F;07&#x2F;hash-bang-cucumber&#x2F;&quot;&gt;hash bang
cucumber&lt;&#x2F;a&gt;, reminded
me of a piece of hax I whipped up a few weeks ago with Ruby and Fish Shell.&lt;&#x2F;p&gt;
&lt;p&gt;Fish has an event system that allows you to register functions to be auto-run after or during certain events (such as
when a particular environment variable is changed). One of this events is called &lt;code&gt;fish_command_not_found&lt;&#x2F;code&gt;. It is
triggered whenever you type a non-existant command into the prompt.&lt;&#x2F;p&gt;
&lt;p&gt;With this in mind, you can trigger certain commands to run by matching what fish couldn’t manage to run automatically by
catching this event.&lt;&#x2F;p&gt;
&lt;p&gt;For instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;fish&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-fish &quot;&gt;&lt;code class=&quot;language-fish&quot; data-lang=&quot;fish&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;__fish_method_missing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;--on-event &lt;&#x2F;span&gt;&lt;span&gt;fish_command_not_found
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;method_missing $argv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;funcsave &lt;&#x2F;span&gt;&lt;span&gt;method_missing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Given that function is created (simply paste the whole code block into your Fish terminal), I can now create a command
called &lt;code&gt;method_missing&lt;&#x2F;code&gt; (or whatever you call inside your &lt;code&gt;__fish_method_missing&lt;&#x2F;code&gt;) and place it somewhere in your
&lt;code&gt;$PATH&lt;&#x2F;code&gt; — I like &lt;code&gt;~&#x2F;.config&#x2F;fish&#x2F;bin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My &lt;code&gt;method_missing&lt;&#x2F;code&gt; binary is simply something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env ruby
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ARGV&lt;&#x2F;span&gt;&lt;span&gt;.shift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Running &lt;&#x2F;span&gt;&lt;span&gt;#{cmd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; instead&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(cmd)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^git(@|:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&#x2F;\&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;).*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;git$&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  run(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;git clone &lt;&#x2F;span&gt;&lt;span&gt;#{command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^(?:ftp|https?):&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&#x2F;\&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;t(?:ar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)?gz$&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  run(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;curl &lt;&#x2F;span&gt;&lt;span&gt;#{command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; | tar xzv&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;$stderr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;No default action defined in &lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;inspect&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;abort
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each command you want to register just becomes a new &lt;code&gt;when&lt;&#x2F;code&gt;
statement. For instance, to implement the functionality Dr Nic was
trying to achieve, I simply modify the &lt;code&gt;case&lt;&#x2F;code&gt; block as such:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; command
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^[a-z0-9_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\-\&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;]+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;feature(:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;+)?$&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  run(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;cucumber &lt;&#x2F;span&gt;&lt;span&gt;#{command}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The existing entries I have in my &lt;code&gt;method_missing&lt;&#x2F;code&gt; command will auto-clone the repository of a pasted Git URL and
download and expand a URL for a tar file, respectively. Not too shabby, and dead easy to implement.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using Apache as a BasicAuth proxy to an internal resource</title>
		<published>2009-09-02T12:53:00+00:00</published>
		<updated>2011-08-28T21:05:42+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-apache-as-a-basicauth-proxy-to-an-internal-resource/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-apache-as-a-basicauth-proxy-to-an-internal-resource/</id>
		<content type="html">&lt;p&gt;This article isn’t named ideally so if you have a better title, tell me.&lt;&#x2F;p&gt;
&lt;p&gt;This is the scenario: we have a simple HTTP resource on the internal network at &lt;a href=&quot;http:&#x2F;&#x2F;mocra.com&quot;&gt;Mocra&lt;&#x2F;a&gt;. This resource
is a closed source tool which is great except that it has one drawback — there are only two security modes: basic
authentication on, or basic authentication off.  There is only one username&#x2F;password and you can’t control when or by
whom it is required.&lt;&#x2F;p&gt;
&lt;p&gt;Now, my preferred behaviour here is to be able to give out multiple login&#x2F;passwords and also to only require
authentication &lt;strong&gt;outside&lt;&#x2F;strong&gt; of our local network. I set out to get this working.&lt;&#x2F;p&gt;
&lt;p&gt;I devised this solution a few months ago (which is why it’s using Apache at all) but I thought it might be of some use
to someone. I created an Apache VirtualHost to act as a proxy between this resource and its clients. It looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#dcdfe4;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;VirtualHost *:80&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # This virtual host proxies requests for the internal resource
&lt;&#x2F;span&gt;&lt;span&gt;  ServerName external.resource.com
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # Set auth header to base64 encoded &amp;#39;username:password&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  # where username and password are the credentials for internal resource
&lt;&#x2F;span&gt;&lt;span&gt;  RequestHeader set Authorization &amp;quot;Basic dXNlcm5hbWU6cGFzc3dvcmQ=&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ProxyPass &#x2F;resource_path&#x2F; http:&#x2F;&#x2F;192.168.1.123:1337&#x2F;resource_path&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  ProxyPassReverse &#x2F;resource_path&#x2F; http:&#x2F;&#x2F;192.168.1.123:1337&#x2F;resource_path&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;Location &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Order allow,deny
&lt;&#x2F;span&gt;&lt;span&gt;    Allow from 192.168.1.0&#x2F;24 # our local subnet
&lt;&#x2F;span&gt;&lt;span&gt;    Allow from 127.0.0.1 # duh
&lt;&#x2F;span&gt;&lt;span&gt;    Allow from 1.3.3.7 # our external router IP
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    AuthType basic
&lt;&#x2F;span&gt;&lt;span&gt;    AuthName &amp;quot;Our Internal Resource&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # where all the external login&#x2F;passwords are
&lt;&#x2F;span&gt;&lt;span&gt;    AuthUserFile &#x2F;var&#x2F;www&#x2F;.htpasswd
&lt;&#x2F;span&gt;&lt;span&gt;    Require valid-user
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    # this is the secret sauce that allows EITHER
&lt;&#x2F;span&gt;&lt;span&gt;    # local access or Basic Auth access
&lt;&#x2F;span&gt;&lt;span&gt;    Satisfy Any
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;Location&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  RewriteEngine on
&lt;&#x2F;span&gt;&lt;span&gt;  RewriteRule ^&#x2F;?$ http:&#x2F;&#x2F;external.resource.com:80&#x2F;resource_path&#x2F; [R]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;VirtualHost&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using fields_for can generate invalid HTML</title>
		<published>2009-07-30T03:47:00+00:00</published>
		<updated>2011-08-28T20:39:47+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-fields-for-can-generate-invalid-html/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-fields-for-can-generate-invalid-html/</id>
		<content type="html">&lt;p&gt;Just a quick post so show you how &lt;code&gt;fields_for&lt;&#x2F;code&gt; form helper can cause invalid HTML when used in combination with
&lt;code&gt;accepts_nested_attributes_for&lt;&#x2F;code&gt; in your views.&lt;&#x2F;p&gt;
&lt;p&gt;If you are for any reason editing&#x2F;creating your child objects in a tabular form, your view might look something like
this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;erb&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-erb &quot;&gt;&lt;code class=&quot;language-erb&quot; data-lang=&quot;erb&quot;&gt;&lt;span&gt;&amp;lt;% form_for(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;@todo_list&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;| %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;%= f.label      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:name &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;%= f.text_field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:name &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;To Do Items:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;To Do Item&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Due Date&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Done?&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;% f.fields_for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;| %&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;%= item.text_field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:content &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;%= item.text_field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:due_date &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;%= item.check_box  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:done &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;%= f.submit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Save&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end &lt;&#x2F;span&gt;&lt;span&gt;%&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first glance this looks fine. However, when the &lt;code&gt;ToDoList&lt;&#x2F;code&gt; model has &lt;code&gt;accepts_nested_attributes_for :items&lt;&#x2F;code&gt;, the
&lt;code&gt;fields_for&lt;&#x2F;code&gt; helper also outputs a hidden field for each existing &lt;code&gt;Item&lt;&#x2F;code&gt; instance with it’s ID.&lt;&#x2F;p&gt;
&lt;p&gt;This means that we get the following HTML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&#x2F;to_do_lists&#x2F;1&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;edit_to_do_list&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;edit_to_do_list_1&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;post&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;margin:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;padding:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;display:inline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;_method&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;put&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;authenticity_token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;CE2jyRoewbwsqu4eX8AFWFqsgrMfCN35Jzy6b43MhsA=&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Name&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_name&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[name]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;30&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Sup&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;To Do Items:&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;To Do Item&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Due Date&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;Done?&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;th&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;thead&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_0_id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][id]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_0_content&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][content]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;30&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;arst&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_0_due_date&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][due_date]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;30&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;2009-07-30&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][done]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_0_done&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][done]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;checkbox&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_1_id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][id]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;2&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_1_content&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][content]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;30&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;arst&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_1_due_date&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][due_date]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;30&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;text&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;2009-07-30&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][done]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;0&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_1_done&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][done]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;checkbox&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_submit&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;commit&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;submit&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Save&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The keen eye will notice the hidden &lt;code&gt;&amp;lt;input&amp;gt;&lt;&#x2F;code&gt; tags that are direct children of the &lt;code&gt;tbody&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_0_id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][0][id]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&amp;lt;!-- clip! --&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list_items_attributes_1_id&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;to_do_list[items_attributes][1][id]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hidden&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;2&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&amp;lt;!-- clip! --&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tbody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not a valid place for an &lt;code&gt;&amp;lt;input&amp;gt;&lt;&#x2F;code&gt; tag.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve put an example project demonstrating this on &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;bjeanes&#x2F;fields_for_invalid_html&quot;&gt;my GitHub&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Fix for &quot;dynamic_pager: cannot open swap directory &#x2F;private&#x2F;var&#x2F;vm&quot; in OS X (possibly just Snow Leopard)</title>
		<published>2009-07-09T05:34:00+00:00</published>
		<updated>2011-08-28T21:07:39+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/fix-for-dynamic-pager-cannot-open-swap-directory-private-var-vm-in-os-x-possibly-just-snow-leopard/" type="text/html"/>
		<id>https://bjeanes.com/posts/fix-for-dynamic-pager-cannot-open-swap-directory-private-var-vm-in-os-x-possibly-just-snow-leopard/</id>
		<content type="html">&lt;p&gt;Today my Snow Leopard install was going so slow it felt like I was trying to swim through molasses. The system was
literally so slow that typing text into some text fields (especially TextMate) lagged at about a rate of 1 character per
second, and opening files (or even running &lt;code&gt;touch&lt;&#x2F;code&gt; on them) took a couple of seconds.&lt;&#x2F;p&gt;
&lt;p&gt;After a few fruitless restarts and a keen eye on my logs I started noticing these errors in Console.app:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#dcdfe4;&quot;&gt;&lt;code&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:37 PM com.apple.launchd[1] (com.apple.dynamic*pager) Exited with exit code: 1
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:37 PM com.apple.launchd Throttling respawn: Will start in 10 seconds
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:47 PM com.apple.dynamic_pager[2481] dynamic_pager: cannot open swap directory &#x2F;private&#x2F;var&#x2F;vm
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:47 PM com.apple.launchd Exited with exit code: 1
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:47 PM com.apple.launchd Throttling respawn: Will start in 10 seconds
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:57 PM com.apple.dynamic_pager[2546] dynamic_pager: cannot open swap directory &#x2F;private&#x2F;var&#x2F;vm
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:57 PM com.apple.launchd Exited with exit code: 1
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:01:57 PM com.apple.launchd Throttling respawn: Will start in 10 seconds
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:02:07 PM com.apple.dynamic_pager[2547] dynamic_pager: cannot open swap directory &#x2F;private&#x2F;var&#x2F;vm
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:02:07 PM com.apple.launchd[1] (com.apple.dynamic_pager[2547]) Exited with exit code: 1
&lt;&#x2F;span&gt;&lt;span&gt;9&#x2F;07&#x2F;09 3:02:07 PM com.apple.launchd[1] (com.apple.dynamic_pager) Throttling respawn: Will start in 10 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I don’t know how or why they started but I was able to fix it by simply running &lt;code&gt;sudo mkdir &#x2F;private&#x2F;var&#x2F;vm&lt;&#x2F;code&gt; in
Terminal. Within a few seconds of creating the directory, the errors ceased and I could see a swapfile created inside
the directory.&lt;&#x2F;p&gt;
&lt;p&gt;I have no idea what caused the directory to be deleted in the first place or why OS X isn’t smart enough to try creating
it, but the fix is simple and instantly effective.&lt;&#x2F;p&gt;
&lt;p&gt;Note: I am not sure if this is a Snow Leopard specific issue or not, but it very well might be. Also, these started
right after installing Adobe CS4, so I feel pretty confident blaming that for now.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using accepts_nested_attributes_for When the Child Object validates_presence_of Parent</title>
		<published>2009-07-06T04:45:00+00:00</published>
		<updated>2011-08-28T21:10:08+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-accepts-nested-attributes-for-when-the-child-object-validates-presence-of-parent/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-accepts-nested-attributes-for-when-the-child-object-validates-presence-of-parent/</id>
		<content type="html">&lt;p&gt;I came across an interesting dilemma today in Rails 2.3 whilst trying to
use &lt;code&gt;accepts_nested_attributes_for&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The models I have were:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Organization &amp;lt; ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:users
&lt;&#x2F;span&gt;&lt;span&gt;  accepts_nested_attributes_for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:users
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;User &amp;lt; ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  belongs_to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:organization
&lt;&#x2F;span&gt;&lt;span&gt;  validates_presence_of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:organization
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had an “Organization” creation form which allowed an administrator to
create an Organization and an initial user for it. However, even though
I had filled in all the required fields to pass the validations I was
constantly getting the following error: &lt;code&gt;Organization can not be blank&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Digging deeper I found that when an object is added to an association
via the &lt;code&gt;association.build&lt;&#x2F;code&gt; method, the parent object
isn’t actually set:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Organization&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:name &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#&amp;lt;Organization id: nil, name: &amp;quot;Test&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; o.users.build(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:name &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Test User&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#&amp;lt;User id: nil, organization_id: nil, name: &amp;quot;Test User&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; u.organization
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Apparently this flaw also applies to
&lt;code&gt;accepts_nested_attributes_for&lt;&#x2F;code&gt;. When I send through the
User &lt;code&gt;params&lt;&#x2F;code&gt; through from my form normally with the
&lt;code&gt;Organization&lt;&#x2F;code&gt; params, it creates the
&lt;code&gt;User&lt;&#x2F;code&gt; object in the &lt;code&gt;users&lt;&#x2F;code&gt; association
as you’d expect, but raises a validation error because the
&lt;code&gt;User&lt;&#x2F;code&gt; instance doesn’t recognise that it is has a parent
&lt;code&gt;Organization&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My quick 5 minute fix was to modify the &lt;code&gt;Organization&lt;&#x2F;code&gt;
model thusly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Organization &amp;lt; ActiveRecord::Base
&lt;&#x2F;span&gt;&lt;span&gt;  has_many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:users
&lt;&#x2F;span&gt;&lt;span&gt;  accepts_nested_attributes_for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:users
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;users_attributes_with_self_assignment=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.users_attributes_without_self_assignment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; attributes
&lt;&#x2F;span&gt;&lt;span&gt;    users.each { |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;| u.organization &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  alias_method_chain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:users_attributes=&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:self_assignment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Related Rails bugs seem to be
&lt;a href=&quot;https:&#x2F;&#x2F;rails.lighthouseapp.com&#x2F;projects&#x2F;8994-ruby-on-rails&#x2F;tickets&#x2F;1943&quot;&gt;here&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;rails.lighthouseapp.com&#x2F;projects&#x2F;8994-ruby-on-rails&#x2F;tickets&#x2F;2815&quot;&gt;here&lt;&#x2F;a&gt;.
&lt;a href=&quot;https:&#x2F;&#x2F;rails.lighthouseapp.com&#x2F;projects&#x2F;8994&#x2F;tickets&#x2F;1619-patch-support-for-inverse-option-in-associations&quot;&gt;This
patch&lt;&#x2F;a&gt;
will also solve the problem and is currently &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;rails&#x2F;rails&#x2F;commit&#x2F;ccea98389abbf150b886c9f964b1def47f00f237&quot;&gt;in
edge&lt;&#x2F;a&gt;,
but didn’t make it in time for Rails 2.3.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Fish Shell version of __git_ps1 Function That is Bundled with Git</title>
		<published>2009-07-04T15:34:00+00:00</published>
		<updated>2011-08-28T21:04:52+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/fish-shell-version-of-git-ps1-function-that-is-bundled-with-git/" type="text/html"/>
		<id>https://bjeanes.com/posts/fish-shell-version-of-git-ps1-function-that-is-bundled-with-git/</id>
		<content type="html">&lt;p&gt;Today at ActionHack, I was showing off Fish Shell to &lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;geoffreyd&quot;&gt;@geoffreyd&lt;&#x2F;a&gt;. I was showing off all
the cool fish prompt features I had, but pointed out that my git branch portion needed some beefing up, as it didn&#x27;t
show the current mode nor commit shas when not in a branch.&lt;&#x2F;p&gt;
&lt;p&gt;Knowing that git came with a &lt;code&gt;__git_ps1()&lt;&#x2F;code&gt; function for Bash that achieves this, I decided to port it to Fish tonight.
My shell scripting fu is pretty weak but as far as I can tell it works great and I am now using it in my shell.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the Fish function (I’ve kept the function name the same as the bash one):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;__git_ps1
&lt;&#x2F;span&gt;&lt;span&gt;  set -l g (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rev-parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --git-dir&lt;&#x2F;span&gt;&lt;span&gt; ^&#x2F;dev&#x2F;null)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; -l r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; -l b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;..&#x2F;.dotest&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;..&#x2F;.dotest&#x2F;rebasing&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|REBASE&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[ -&lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;..&#x2F;.dotest&#x2F;applying&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|AM&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|AM&#x2F;REBASE&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (git symbolic-ref HEAD ^&#x2F;dev&#x2F;null)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[ -&lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;.dotest-merge&#x2F;interactive&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|REBASE-i&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;.dotest-merge&#x2F;head-name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[ -&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;.dotest-merge&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|REBASE-m&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;.dotest-merge&#x2F;head-name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[ -&lt;&#x2F;span&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;MERGE_HEAD&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|MERGING&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (git symbolic-ref HEAD ^&#x2F;dev&#x2F;null)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;BISECT_LOG&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;|BISECTING&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (git symbolic-ref HEAD ^&#x2F;dev&#x2F;null)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-z &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (git describe --exact-match HEAD ^&#x2F;dev&#x2F;null)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;-z &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (cut -c1-7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;HEAD&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt; test $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;argv
&lt;&#x2F;span&gt;&lt;span&gt;  		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; argv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; (%s)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; b (echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sed -e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;s|^refs&#x2F;heads&#x2F;||&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;argv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; ^&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enjoy :)&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using fields_for with Nested Attributes, Calling it Multiple Times</title>
		<published>2009-07-03T07:01:00+00:00</published>
		<updated>2011-08-28T21:12:55+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/using-fields-for-with-nested-attributes-calling-it-multiple-times/" type="text/html"/>
		<id>https://bjeanes.com/posts/using-fields-for-with-nested-attributes-calling-it-multiple-times/</id>
		<content type="html">&lt;p&gt;There has been quite an annoying problem that has been bugging
&lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;chendo&quot;&gt;@chendo&lt;&#x2F;a&gt; and I today.&lt;&#x2F;p&gt;
&lt;p&gt;In short, &lt;a href=&quot;http:&#x2F;&#x2F;api.rubyonrails.org&#x2F;classes&#x2F;ActionView&#x2F;Helpers&#x2F;FormHelper.html#M001895&quot;&gt;&lt;code&gt;fields_for&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; when used with &lt;code&gt;accepts_nested_attributes_for&lt;&#x2F;code&gt;does not reset it’s index when it’s called multiple times for the same attribute.&lt;&#x2F;p&gt;
&lt;p&gt;Our scenario was the following:&lt;&#x2F;p&gt;
&lt;p&gt;We had a 3 levels of hierarchical data that we had to display in a
&lt;code&gt;&amp;lt;table&amp;gt;&lt;&#x2F;code&gt;. Because of the nature of the data we were
displaying one level as columns and the other level as rows.
Unfortunately, HTML mandates that we group everything by rows — each
column is really just a single cell. This means that we have to iterate
over the “column” values not just once, but once for every row.&lt;&#x2F;p&gt;
&lt;p&gt;Now, &lt;code&gt;fields_for&lt;&#x2F;code&gt; takes care of naming your
&lt;code&gt;&amp;lt;input&amp;gt;&lt;&#x2F;code&gt; tags magically with the correct indexes so that
your models can accept the params directly and magic happens. However,
evidently calling &lt;code&gt;fields_for&lt;&#x2F;code&gt; multiple times was not
part of the original intention, and it seems resetting the index after
each call was neglected.&lt;&#x2F;p&gt;
&lt;p&gt;`chendo couldn&#x27;t see a cleaner way of doing this so we added our own option to reset the index. We didn&#x27;t just override the behaviour in case there is a good reason to leave it, but here is our code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ActionView::Helpers::FormBuilder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;fields_for_with_nested_attributes_with_index_reset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;association_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; args.last.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;is_a?&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; args.last[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:reset_index&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;@nested_child_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fields_for_without_nested_attributes_without_index_reset(association_name, args, block)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  alias_method_change &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:fields_for_with_nested_attributes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;:index_reset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to Prepare Your Mac for Resale</title>
		<published>2009-07-01T03:30:00+00:00</published>
		<updated>2011-08-28T21:15:51+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/how-to-prepare-your-mac-for-resale/" type="text/html"/>
		<id>https://bjeanes.com/posts/how-to-prepare-your-mac-for-resale/</id>
		<content type="html">&lt;p&gt;First thing is first: you want to re-install Mac OS X (this guide requires Leopard). Insert your OS X disk and boot off
it. Make sure you do a &amp;quot;Clean Install&amp;quot; so as not to leave any of your files on the system.&lt;&#x2F;p&gt;
&lt;p&gt;When the install is finished, your computer will restart and you’ll see the traditional OS X welcome screen and the
setup assistant. Go through all the settings, choosing anything just to get the system booted up.  However, make sure
you take note of the user account login you use. For this guide, I will assume login of &lt;code&gt;temp&lt;&#x2F;code&gt;, and if you don’t have a
good reason not to, you should do the same.&lt;&#x2F;p&gt;
&lt;p&gt;At this point you want to download any Apple updates and install them, as well as install any bundled software you plan
to advertise the machine coming with. When all your installs are finished and the machine is as you want it for the
customer&#x2F;recipient, shut down the machine.&lt;&#x2F;p&gt;
&lt;p&gt;Next, turn the machine back on but as soon as you hear the Mac chime noise, press and hold ⌘S until you are taken to a
console (white text on black screen — looks real nerdy and sci-fi).&lt;&#x2F;p&gt;
&lt;p&gt;The next step is to run all the commands in the code block below.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;NOTE: If you didn’t use &lt;code&gt;temp&lt;&#x2F;code&gt; as your username you created in the setup assistant, make sure you replace &lt;strong&gt;all&lt;&#x2F;strong&gt;
instances of &lt;code&gt;temp&lt;&#x2F;code&gt; with your actual username.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Mount the file system so we can modify it
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;sbin&#x2F;fsck -fy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;sbin&#x2F;mount -uw&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Activate directory services
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;bin&#x2F;launchctl&lt;&#x2F;span&gt;&lt;span&gt; load &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.DirectoryServices.plist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Delete all traces of the temporary account
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;dscl&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -delete&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Users&#x2F;temp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;dscl&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -delete&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Groups&#x2F;admin GroupMembership temp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;bin&#x2F;rm -rf&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Users&#x2F;temp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Get rid of a few other files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;bin&#x2F;rm -R&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Library&#x2F;Preferences
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;bin&#x2F;rm -f&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;root&#x2F;.bash_history
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Now we make it appear as though the initial setup assistant
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# still needs to run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;bin&#x2F;rm&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;db&#x2F;.AppleSetupDone
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Reboot and check that it seems like
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# it is a new mac, then turn off your computer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# and sell it!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;&#x2F;sbin&#x2F;reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Unescaping UTF-8 Strings in Ruby 1.9</title>
		<published>2009-06-30T02:49:00+00:00</published>
		<updated>2011-08-28T21:55:46+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/unescaping-utf-8-strings-in-ruby-1-9/" type="text/html"/>
		<id>https://bjeanes.com/posts/unescaping-utf-8-strings-in-ruby-1-9/</id>
		<content type="html">&lt;p&gt;Today, Ryan Bigg and I encountered a little issue with &lt;code&gt;String&lt;&#x2F;code&gt; encodings in Ruby 1.9. In this project, some Merb UTF-8
params needed to be unescaped. We spent some trying to force strings into UTF-8 encoding but for some reason while the
encoding was UTF–8, the actual contents of the strings were getting massacred.&lt;&#x2F;p&gt;
&lt;p&gt;Long story short:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# In Ruby 1.9
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Broken
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;URI&lt;&#x2F;span&gt;&lt;span&gt;::unescape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Baden-W&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;%C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;%B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Crttemberg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# =&amp;gt; &amp;quot;Baden-WÃ¼rttemberg&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Working
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CGI&lt;&#x2F;span&gt;&lt;span&gt;::unescape(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Baden-W&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;%C&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;%B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Crttemberg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# =&amp;gt; &amp;quot;Baden-Württemberg&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another lesson we learnt on our adventures today is the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Munich&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m1.encoding  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# let&amp;#39;s suppose it is something other than UTF-8, such as ASCII-8Bit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;m2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;München&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m2.encoding  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# let&amp;#39;s suppose we have a UTF-8 encoded string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# The following will raise an exception about mismatched encodings
&lt;&#x2F;span&gt;&lt;span&gt;m3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; m2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# The easiest way to get around this is to do the concatenation like so:
&lt;&#x2F;span&gt;&lt;span&gt;m3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; m1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; m2.force_encoding(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Colemak</title>
		<published>2009-06-29T13:24:00+00:00</published>
		<updated>2011-08-28T21:16:34+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/colemak/" type="text/html"/>
		<id>https://bjeanes.com/posts/colemak/</id>
		<content type="html">&lt;p&gt;About a year ago I found out about the &lt;a href=&quot;http:&#x2F;&#x2F;colemak.com&quot;&gt;Colemak&lt;&#x2F;a&gt; keyboard layout. This is what it looks like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;http:&#x2F;&#x2F;colemak.com&#x2F;wiki&#x2F;images&#x2F;8&#x2F;80&#x2F;Colemak_layout_2.png&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I was instantly intrigued and was drawn to a few key features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to learn&lt;&#x2F;li&gt;
&lt;li&gt;Caps lock is replaced with backspace (making backspace closer to fingers and getting rid of the useless caps lock)&lt;&#x2F;li&gt;
&lt;li&gt;Obvious health benefits (just look how much your fingers need to move when using QWERTY
&lt;a href=&quot;http:&#x2F;&#x2F;colemak.com&#x2F;Compare&quot;&gt;here&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;It’s not QWERTY, which was designed &lt;a href=&quot;http:&#x2F;&#x2F;colemak.com&#x2F;FAQ#What.27s_wrong_with_the_QWERTY_layout.3F&quot;&gt;without any consideration to ergonomic or efficiency
aspects&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Long story short: it took me a few tries to commit to learning it (3 tries over year in fact). Eventually I went cold
turkey for a week and haven’t looked back. Typing is more comfortable and faster already.&lt;&#x2F;p&gt;
&lt;p&gt;Getting Colemak on OS X is as simple as following &lt;a href=&quot;http:&#x2F;&#x2F;colemak.com&#x2F;Mac&quot;&gt;the simple Installation instructions&lt;&#x2F;a&gt;. The
instructions seem out of date when it comes to re-mapping caps lock to backspace. It is as simple as downloading
&lt;a href=&quot;http:&#x2F;&#x2F;www.pqrs.org&#x2F;tekezo&#x2F;macosx&#x2F;keyremap4macbook&#x2F;extra.html&quot;&gt;PCKeyboardHack&lt;&#x2F;a&gt;, installing it, rebooting, and choosing
the option in its preference pane to remap caps lock to delete (key code 51).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;snow-leopard&quot;&gt;Snow Leopard&lt;&#x2F;h3&gt;
&lt;p&gt;Colemak itself works fine under Snow Leopard, however the PCKeyboardHack utility does not work, because it is hardcoded
to only load the kernel driver if it recognises the OS version. Luckily it is open source, and I was able to import the
Mercurial project into a &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;bjeanes&#x2F;PCKeyboardHack&quot;&gt;GitHub project&lt;&#x2F;a&gt;, modify it, and build a version that
works fine on Snow Leopard.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dead-keys-that-apple-uses-on-the-qwerty-layout&quot;&gt;Dead Keys that Apple uses on the QWERTY layout&lt;&#x2F;h3&gt;
&lt;p&gt;One thing I loved about the QWERTY layout on OS X was the sensible dead key and alternate character behaviours, allowing
users to quickly and logically input characters such as: , é, ¡, ¿, », ‡, °, etc. The version of Colemak, for one
reason or another, moved or simply didn’t have many of these shortcuts.&lt;&#x2F;p&gt;
&lt;p&gt;So, I created my own Colemak layout bundle that moves the dead key positions to preserve the associations with the
character position changes from QWERTY to Colemak. This means, for example,  can be created by pressing ⌥⇧K on either
keyboard layout (where K is the key that outputs K, not the key that physically says K on it).&lt;&#x2F;p&gt;
&lt;p&gt;My version of the Colemak bundle is available on &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;bjeanes&#x2F;colemak&quot;&gt;my GitHub&lt;&#x2F;a&gt;.  Simply put the
&lt;code&gt;.bundle&lt;&#x2F;code&gt; file in your &lt;code&gt;~&#x2F;Library&#x2F;Keyboard Layouts&lt;&#x2F;code&gt; directory. The bundle includes both the original keyboard layout and
my re-created one so you can switch between them if you need both, for any reason.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Generating Sound from Sine Waves on the iPhone</title>
		<published>2009-06-29T11:31:00+00:00</published>
		<updated>2011-08-28T21:24:26+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/generating-sound-from-sine-waves-on-the-iphone/" type="text/html"/>
		<id>https://bjeanes.com/posts/generating-sound-from-sine-waves-on-the-iphone/</id>
		<content type="html">&lt;p&gt;A few months ago I saw this extremely addictive flash game&#x2F;toy called
&lt;a href=&quot;http:&#x2F;&#x2F;lab.andre-michelle.com&#x2F;tonematrix&quot;&gt;ToneMatrix&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My immediate thought was: &amp;quot;This would make quite possibly the coolest iPhone application ever.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;So my good friend, &lt;a href=&quot;http:&#x2F;&#x2F;twitter.com&#x2F;sync1983&quot;&gt;Anthony Mittaz&lt;&#x2F;a&gt;, and I
decided to have a crack at it but hit one immediate hurdle; however
proficient an iPhone developer Anthony is, he hadn’t done anything to do
with sound, and nor had I, in &lt;em&gt;any&lt;&#x2F;em&gt; language&#x2F;framework, let alone on the
iPhone. Let me tell you this: Apple’s documentation in this area is
severely lacking. Tangent: well, almost all Apple documentation on
specialised things is pretty sparse.&lt;&#x2F;p&gt;
&lt;p&gt;I think we spent about two weeks’ worth of nights reading documentation,
source code (Cocoa, iPhone, Java, C, and others), and plain outright
stabbing in the dark code-wise getting not much more than ugly pops and
crackles. Whenever we thought we had a clean note working, we’d change
the frequency to what &lt;strong&gt;should&lt;&#x2F;strong&gt; be another nice clean note, and would
instead get ear-shattering screeches.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless we persevered and were even able to come up with a nifty
little piece of code that could take an array of frequencies and play
them together in what could be made to sound like a pleasant chord.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the relevant code:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;TonePlayer.h&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;objective-c&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-objective-c &quot;&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;Foundation&#x2F;Foundation.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;AudioUnit&#x2F;AudioUnit.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;math.h&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;kTonesAvailable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;kOutputBus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;kInputBus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;kNumChannels &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span&gt;TonePlayer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;NSObject {
&lt;&#x2F;span&gt;&lt;span&gt;  AudioComponentInstance audioUnit;
&lt;&#x2F;span&gt;&lt;span&gt;  AudioStreamBasicDescription audioFormat;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; phase[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kTonesAvailable&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kTonesAvailable&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(OSStatus)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-(OSStatus)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;stop&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;resetFrequencies&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;cleanUp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;intialiseAudio&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Some C function headers to get arount compile errors while I refactor to be more readable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;phaseOffsetFromFrequency&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;OSStatus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;RenderCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void*&lt;&#x2F;span&gt;&lt;span&gt;, AudioUnitRenderActionFlags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; AudioTimeStamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UInt32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UInt32&lt;&#x2F;span&gt;&lt;span&gt;, AudioBufferList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;TonePlayer.m&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;objective-c&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-objective-c &quot;&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;TonePlayer.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@defs&lt;&#x2F;span&gt;&lt;span&gt;(TonePlayer);
&lt;&#x2F;span&gt;&lt;span&gt;} SinewaveDef;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@implementation &lt;&#x2F;span&gt;&lt;span&gt;TonePlayer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;static float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gSampleRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;44100.&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;static float&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;111&lt;&#x2F;span&gt;&lt;span&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;8.1758&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;8.6620&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;9.1770&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;9.7227&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;10.3009&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;10.9134&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;11.5623&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;12.2499&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;12.9783&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;13.7500&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;14.5676&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;15.4339&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;16.3516&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;17.3239&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;18.3540&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;19.4454&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;20.6017&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;21.8268&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;23.1247&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;24.4997&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;25.9565&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;27.5000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;29.1352&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;30.8677&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;32.7032&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;34.6478&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;36.7081&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;38.8909&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;41.2034&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;43.6535&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;46.2493&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;48.9994&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;51.9131&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;55.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;58.2705&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;61.7354&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;65.4064&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;69.2957&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;73.4162&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;77.7817&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;82.4069&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;87.3071&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;92.4986&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;97.9989&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;103.8262&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;110.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;116.5409&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;123.4708&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;130.8128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;138.5913&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;146.8324&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;155.5635&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;164.8138&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;174.6141&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;184.9972&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;195.9977&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;207.6523&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;220.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;233.0819&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;246.9417&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;261.6256&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;277.1826&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;293.6648&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;311.1270&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;329.6276&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;349.2282&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;369.9944&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;391.9954&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;415.3047&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;440.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;466.1638&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;493.8833&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;523.2511&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;554.3653&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;587.3295&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;622.2540&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;659.2551&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;698.4565&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;739.9888&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;783.9909&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;830.6094&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;880.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;932.3275&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;987.7666&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1046.5023&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1108.7305&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1174.6591&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1244.5079&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1318.5102&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1396.9129&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1479.9777&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1567.9817&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1661.2188&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1760.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1864.6550&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1975.5332&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2093.0045&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2217.4610&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2349.3181&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2489.0159&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2637.0205&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2793.8259&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2959.9554&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;3135.9635&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;3322.4376&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;3520.0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;3729.3101&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;3951.0664&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;4186.0090&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;4434.9221&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;4698.6363
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OSStatus    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;RenderCallback&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void                          *&lt;&#x2F;span&gt;&lt;span&gt;inRefCon,
&lt;&#x2F;span&gt;&lt;span&gt;                           AudioUnitRenderActionFlags    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ioActionFlags,
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; AudioTimeStamp          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;inTimeStamp,
&lt;&#x2F;span&gt;&lt;span&gt;                           UInt32                        inBusNumber,
&lt;&#x2F;span&gt;&lt;span&gt;                           UInt32                        inNumberFrames,
&lt;&#x2F;span&gt;&lt;span&gt;                           AudioBufferList               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ioData)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  SinewaveDef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; inRefCon;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float *&lt;&#x2F;span&gt;&lt;span&gt;outL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ioData-&amp;gt;mBuffers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mData&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float *&lt;&#x2F;span&gt;&lt;span&gt;outR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ioData-&amp;gt;mBuffers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mData&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; wave, j;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; freqs[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kTonesAvailable&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(freqs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(freqs));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; inNumberFrames; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    wave &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kTonesAvailable&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;m) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(def-&amp;gt;frequencies[m] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(freqs[m] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) freqs[m] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;phaseOffsetFromFrequency&lt;&#x2F;span&gt;&lt;span&gt;(def-&amp;gt;frequencies[m]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        wave &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;sinf&lt;&#x2F;span&gt;&lt;span&gt;(def-&amp;gt;phase[m]);
&lt;&#x2F;span&gt;&lt;span&gt;        def-&amp;gt;phase[m] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; freqs[m];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;j;
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    wave &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&#x2F;=&lt;&#x2F;span&gt;&lt;span&gt; j;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;outL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;++ =&lt;&#x2F;span&gt;&lt;span&gt; wave;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;outR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;++ =&lt;&#x2F;span&gt;&lt;span&gt; wave;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;noErr;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;phaseOffsetFromFrequency&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; frequency) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)(frequency &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; M_PI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gSampleRate&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;resetFrequencies&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(frequencies, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(frequencies));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;memset&lt;&#x2F;span&gt;&lt;span&gt;(phase, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(phase));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(OSStatus)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;resetFrequencies&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  OSStatus status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioOutputUnitStart&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; See http:&#x2F;&#x2F;www.phys.unsw.edu.au&#x2F;jw&#x2F;notes.html for note numbers
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; C
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; E
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;67&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; G
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;67&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;71&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;74&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;67&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  frequencies[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; notes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; status;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(OSStatus)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;stop&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioOutputUnitStop&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;cleanUp&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioUnitUninitialize&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-(AudioStreamBasicDescription)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;audioFormat&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; audioFormat;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Below code is a cut down version (for output only) of the code written by
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Micheal &amp;quot;Code Fighter&amp;quot; Tyson (punch on Mike)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; See http:&#x2F;&#x2F;michael.tyson.id.au&#x2F;2008&#x2F;11&#x2F;04&#x2F;using-remoteio-audio-unit&#x2F; for details
&lt;&#x2F;span&gt;&lt;span&gt;-(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;intialiseAudio&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  OSStatus status;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Describe audio component
&lt;&#x2F;span&gt;&lt;span&gt;  AudioComponentDescription desc;
&lt;&#x2F;span&gt;&lt;span&gt;  desc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;componentType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitType_Output&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  desc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;componentSubType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitSubType_RemoteIO&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  desc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;componentFlags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  desc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;componentFlagsMask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  desc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;componentManufacturer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitManufacturer_Apple&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Get component
&lt;&#x2F;span&gt;&lt;span&gt;  AudioComponent inputComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioComponentFindNext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;desc);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Get audio units
&lt;&#x2F;span&gt;&lt;span&gt;  status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioComponentInstanceNew&lt;&#x2F;span&gt;&lt;span&gt;(inputComponent, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;audioUnit);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  UInt32 flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Enable IO for playback
&lt;&#x2F;span&gt;&lt;span&gt;  status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioUnitSetProperty&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioOutputUnitProperty_EnableIO&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitScope_Output&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kOutputBus&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;flag,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(flag));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Describe format
&lt;&#x2F;span&gt;&lt;span&gt;        audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mSampleRate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gSampleRate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mFormatID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioFormatLinearPCM&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mFormatFlags &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioFormatFlagsNativeFloatPacked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioFormatFlagIsNonInterleaved&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mFramesPerPacket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mBytesPerPacket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= sizeof&lt;&#x2F;span&gt;&lt;span&gt;(Float32);
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mBytesPerFrame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= sizeof&lt;&#x2F;span&gt;&lt;span&gt;(Float32);
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mChannelsPerFrame &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kNumChannels&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  audioFormat.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mBitsPerChannel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F;Apply format
&lt;&#x2F;span&gt;&lt;span&gt;  status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioUnitSetProperty&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitProperty_StreamFormat&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitScope_Input&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kOutputBus&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;audioFormat,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(audioFormat));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Set up the playback  callback
&lt;&#x2F;span&gt;&lt;span&gt;  AURenderCallbackStruct callbackStruct;
&lt;&#x2F;span&gt;&lt;span&gt;  callbackStruct.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;inputProc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; RenderCallback;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F;set the reference to &amp;quot;self&amp;quot; this becomes *inRefCon in the playback callback
&lt;&#x2F;span&gt;&lt;span&gt;  callbackStruct.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;inputProcRefCon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioUnitSetProperty&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitProperty_SetRenderCallback&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kAudioUnitScope_Global&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;kOutputBus&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;callbackStruct,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span&gt;(callbackStruct));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Initialise
&lt;&#x2F;span&gt;&lt;span&gt;  status &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AudioUnitInitialize&lt;&#x2F;span&gt;&lt;span&gt;(audioUnit);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;@end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I really wish that I could remember how most of it worked, or, more
importantly, the multitude of projects whose code we had to look at to
get it working. If you recognise any of the code or can help add
references on how people can build up a nice list of references for
people to use if are following a similar pursuit.&lt;&#x2F;p&gt;
&lt;p&gt;If you are wondering what ever happened to the application we were
building, it seems we weren’t the only ones who recognised the potential
of ToneMatrix as an iPhone application. During the 2-3 weeks of us
developing the sound generation code, about 5-6 ToneMatrix clones were
added to the AppStore. While most were crap, there was one that we felt
left little to be improved upon and we therefore recommend everyone goes
and downloads
&lt;a href=&quot;http:&#x2F;&#x2F;itunes.apple.com&#x2F;WebObjects&#x2F;MZStore.woa&#x2F;wa&#x2F;viewSoftware?id=313573137&amp;amp;mt=8&quot;&gt;Melodica&lt;&#x2F;a&gt;.
It’s just as addictive as the Flash version, only portable!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>RubyCocoa and Keychain access</title>
		<published>2008-04-10T12:00:00+00:00</published>
		<updated>2011-08-28T21:21:57+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/rubycocoa-and-keychain-access/" type="text/html"/>
		<id>https://bjeanes.com/posts/rubycocoa-and-keychain-access/</id>
		<content type="html">&lt;p&gt;There have been a few posts asking how to access and manipulate the Keychain from within RubyCocoa but no answers
supplied. As someone who is just getting into RubyCocoa (and Cocoa all together for that matter), I thought I’d document
once and for all the process I took to get it working.&lt;&#x2F;p&gt;
&lt;p&gt;I am running on Leopard and while 10.5 is supposed to ship with BridgeSupport for most frameworks, the Security
framework must have been left out. After playing around with using other frameworks (such as the AddressBook framework)
and seeing how they were used, I did a bit of digging in the Apple Developer Documentation (incredible resource for
anyone starting out) and stumbled across this gem: &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;archive&#x2F;documentation&#x2F;Cocoa&#x2F;Conceptual&#x2F;RubyPythonCocoa&#x2F;Articles&#x2F;GenerateFrameworkMetadata.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;TP40005426-SW9&quot;&gt;Generate Framework
Metadata&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After reading this, I was accessing the keychain within 5 minutes.  Here’s how:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the following commands (first one will take some time):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;gen_bridge_metadata -f&lt;&#x2F;span&gt;&lt;span&gt; Security&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; Security.bridgesupport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;Library&#x2F;BridgeSupport
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mv&lt;&#x2F;span&gt;&lt;span&gt; Security.bridgesupport &#x2F;Library&#x2F;BridgeSupport
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Open an IRB session to test it:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;osx&#x2F;cocoa&amp;#39;                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#=&amp;gt; true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;OSX&lt;&#x2F;span&gt;&lt;span&gt;.require_framework &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Security&amp;#39;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#=&amp;gt; true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defined? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;OSX&lt;&#x2F;span&gt;&lt;span&gt;::SecKeychainAddGenericPassword() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;#=&amp;gt; &amp;quot;method&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hoorah! Two steps! Well, one because the second one was just testing… Now go make password-able RubyCocoa application! I
am not sure how to pull this off with deployable apps but I suggest your apps could ship with the file or run those
commands on first-run or if the Security.bridgesupport file doesn’t exist. Note: I have not tested either of those
scenarios, but I would guess the latter would be more reliable for cross-version development (i.e. Tiger + Leopard)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-to-use-these-methods&quot;&gt;How to use these methods&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Require needed libraries
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;osx&#x2F;cocoa&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;OSX
&lt;&#x2F;span&gt;&lt;span&gt;require_framework &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Security&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Set up some relevant variables
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Test Service&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;account &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;MyUsername&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;MyPassword&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Add password to default keychain (first param)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;SecKeychainAddGenericPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, service.length, service, account.length, account, password.length, password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Finding a password in default keychain (first param)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;status, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;SecKeychainFindGenericPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, service.length, service, account.length, account)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Password-related data
&lt;&#x2F;span&gt;&lt;span&gt;password_length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password.shift &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# =&amp;gt; 10
&lt;&#x2F;span&gt;&lt;span&gt;password_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password.shift &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# OSX::ObjcPtr object
&lt;&#x2F;span&gt;&lt;span&gt;password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password_data.bytestr(password_length)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# The last item is another OSX::ObjcPtr. I haven&amp;#39;t figured
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# out how to cast or use this yet but will post when I&amp;#39;ve
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# figured it out
&lt;&#x2F;span&gt;&lt;span&gt;keychain_item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password.shift
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Yay it works! You can also check the password exists
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# in the Keychain Access utility. I&amp;#39;ve confirmed that
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# this works
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# =&amp;gt; &amp;quot;MyPassword&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;update-4-8-08-below-is-a-fix-for-the-rexml-bug-some-people-have&quot;&gt;[UPDATE 4&#x2F;8&#x2F;08]: Below is a fix for the REXML bug some people have&lt;&#x2F;h3&gt;
&lt;p&gt;been getting (myself included)&lt;&#x2F;p&gt;
&lt;p&gt;There is good news for anyone that has been getting the following error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;undefined local variable or method `trans’ for &amp;lt;UNDEFINED&amp;gt; … &amp;lt;&#x2F;&amp;gt;:REXML::Document
&lt;&#x2F;span&gt;&lt;span&gt;Usage: gen_bridge_metadata [options] &amp;lt;headers…&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Use the `-h’ flag or consult gen_bridge_metadata(1) for help.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a very simple fix. This is caused by a typo in the source of REXML. It’s such a massive bug I can’t believe it
made it into the release of Ruby but i did some poking around and it looks like they renamed a method and didn’t change
all references to it.&lt;&#x2F;p&gt;
&lt;p&gt;There are two ways to fix it: patching REXML and patching &lt;code&gt;gen_bridge_metadata&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Personally I prefer patching the generator for peace of mind and I submitted the patch upstream, but never heard back.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;patching-gen-bridge-metadata&quot;&gt;Patching &lt;code&gt;gen_bridge_metadata&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Open &lt;code&gt;&#x2F;usr&#x2F;bin&#x2F;gen_bridge_metadata&lt;&#x2F;code&gt; and find the method definition for
&lt;code&gt;generate_xml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Replace &lt;code&gt;0&lt;&#x2F;code&gt; in the &lt;code&gt;xml_document.write()&lt;&#x2F;code&gt; with &lt;code&gt;-1&lt;&#x2F;code&gt; (both occurrences)&lt;&#x2F;li&gt;
&lt;li&gt;Save!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;patching-rexml&quot;&gt;Patching REXML&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Open
&lt;code&gt;&#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;1.8&#x2F;usr&#x2F;lib&#x2F;ruby&#x2F;1.8&#x2F;rexml&#x2F;document.rb&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Find the line that has &lt;code&gt;if trans&lt;&#x2F;code&gt; and change it to &lt;code&gt;if transitive&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Save!&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
</feed>
