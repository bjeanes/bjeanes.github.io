<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Bo Jeanes - testing</title>
	<link href="https://bjeanes.com/tags/testing/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://bjeanes.com"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2013-03-14T15:37:12+00:00</updated>
	<id>https://bjeanes.com/tags/testing/atom.xml</id>
	<entry xml:lang="en">
		<title>Factories breed complexity</title>
		<published>2012-02-26T19:22:56+00:00</published>
		<updated>2012-03-06T05:26:08+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/factories-breed-complexity/" type="text/html"/>
		<id>https://bjeanes.com/posts/factories-breed-complexity/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Important: A big aspect of this post was the comments. My new blog doesn&#x27;t have comments so until I find a way to
capture them here, please &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20220528193024&#x2F;https:&#x2F;&#x2F;bjeanes.com&#x2F;2012&#x2F;02&#x2F;factories-breed-complexity#comments&quot;&gt;view the old version via Wayback
Machine&lt;&#x2F;a&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Having maintainable code is great. Maintainable code allows you to deliver improvements faster, happier, and more
reliably.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, the measures that developers need to take and the strategies that we have to employ to achieve maintainable
code have been understood for years, if not decades. Especially in the realm of object-oriented programming, but
certainly not exclusively, most of these principles boil down to reducing coupling and system complexity. A system whose
parts are coupled as loosely as possible is a modular system; the parts know little of each other and a lot about
themselves and they have thin and specific interfaces between each other.&lt;&#x2F;p&gt;
&lt;p&gt;Test-driven development is one of the many tools at a developer&#x27;s disposal to achieve code quality. Unfortunately, there
is a lot of naïveté around the benefits of TDD. A lot of developers see TDD as primarily a tool for verifying system
correctness. While TDD does of course offer this benefit, and arguably better than retroactive automated testing, the
real benefit of TDD is that it offers short feedback loops that guide the design&#x2F;architecture of the system.&lt;&#x2F;p&gt;
&lt;p&gt;Since it is accepted that a loosely-coupled modular system is a simpler system, it stands that tools, such as TDD, which
guide a design towards modularity and simplicity are good tools. A module that is tightly coupled to another is not
easily tested in isolation. However, if the isolated tests are written first, it is difficult to write a passing
implementation for that module that maintains such a low degree of coupling. Therefore, good TDD should guide you
towards a simpler design (though it is certainly not the only way).&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, factories work against this goal. Factories debilitate TDD&#x27;s ability to give you feedback into the
complexity of your design.&lt;&#x2F;p&gt;
&lt;p&gt;To be clear, I am not talking about the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Factory_method_pattern&quot;&gt;Factory Method Pattern&lt;&#x2F;a&gt; or
the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Abstract_factory_pattern&quot;&gt;Abstract Factory Pattern&lt;&#x2F;a&gt; — both of which can be described
as ways to &lt;q src=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_creation#Creating_objects&quot;&gt;decouple a particular implementation
of an object from code for the creation of such an object&lt;&#x2F;q&gt;
(&lt;cite&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_creation#Creating_objects&quot;&gt;Wikipedia&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt;). Instead, I am talking about
the &amp;quot;factories&amp;quot; for replacing fixtures in tests — something which has seemingly obsessed the Ruby (Rails, especially)
community. The two primary Ruby libraries for factory-based fixture replacement are
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thoughtbot&#x2F;factory_girl&quot;&gt;factory_girl&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;notahat&#x2F;machinist&quot;&gt;Machinist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A tool such as Machinist or factory_girl &lt;q&gt;generates data for the attributes you don&#x27;t care about, and constructs any
necessary associated objects, leaving you to specify only the fields you care about in your test&lt;&#x2F;q&gt; (from Machinist&#x27;s
own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;notahat&#x2F;machinist&#x2F;blob&#x2F;master&#x2F;README.markdown&quot;&gt;README file&lt;&#x2F;a&gt;). This sounds nice at first, because
it makes your tests more readable and relevant. However, behind the scenes, these tools are still creating other objects
and entities and introducing them into your test environment. By having data and objects in tests that are irrelevant to
the functionality that is being tested (in &lt;em&gt;isolation&lt;&#x2F;em&gt;, remember), a developer creates an environment that permits, if
not invites, silent dependencies to creep into an implementation.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, and perhaps more significantly, by creating objects (and usually entire &lt;em&gt;hierarchies&lt;&#x2F;em&gt; of objects) with such
ease and opacity, you are outright masking the dependencies (*cough* complexity *cough* coupling) between your
implementation and those entities. If forced to stub out all those intricacies, the system complexity would be
screamingly obvious and a developer would quickly avail herself of a rewrite to reduce complexity or thin out the
interface.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of having feedback that guides a developer to simplicity, fixture factories seem to guide developers to
complexity by masking dependencies as one-line simplicity. In fact, that one (or five, whatever) line setup is a shotgun
blast of environmental dependencies that are hidden from the architect. That complexity will come back for revenge after
being ignored for so long.&lt;&#x2F;p&gt;
&lt;p&gt;It seems that factory_girl and Machinist exist to make testing components more convenient. This is, at face value, an
admirable and desirable goal. However, in unit tests, the cost is too high for any system of considerable size.&lt;&#x2F;p&gt;
&lt;p&gt;Please, do the right thing and avoid the convenience and &amp;quot;fun&amp;quot; of the factory_girl temptress. You will trend towards a
simpler system and as a bonus (in fact, an incredible one) your test suite will likely be exponentially faster which, in
turn, will breed simplicity by letting you have more feedback more often.&lt;&#x2F;p&gt;
&lt;p&gt;P.S. It shouldn&#x27;t go without mention that factories can be absolutely awesome for integration tests. Integration tests
aren&#x27;t used for guiding system design nor testing in isolation so the drawbacks of these tools drop away. However, both
factory_girl and Machinist use RSpec as some of their very first usage examples and this troubles me deeply.&lt;&#x2F;p&gt;
&lt;p&gt;P.P.S. A lot of these arguments can be applied to fixtures too. However, they usually don&#x27;t create hordes of objects
invisibly and litter your environment with them. Also, they aren&#x27;t as slow. But yes, the fewer factories &lt;em&gt;and&lt;&#x2F;em&gt; fixtures
in a test, the better.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update for clarity&lt;&#x2F;strong&gt;: Firstly, I am absolutely just talking about unit tests. If you are testing code that
&lt;em&gt;integrates&lt;&#x2F;em&gt; with ActiveRecord or number of levels of your stack, then factories and fixtures are certainly defensible
(though I still prefer to steer clear). Secondly, I&#x27;ve tried to be careful about where I use the words simple, easy,
complex, and difficult. For the definitions that I intend, please watch (at least the first 10 minutes of) &lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Simple Made
Easy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Selector-Free Cucumber Scenarios</title>
		<published>2010-09-19T13:53:00+00:00</published>
		<updated>2013-03-14T15:37:12+00:00</updated>
		<link rel="alternate" href="https://bjeanes.com/posts/selector-free-cucumber-scenarios/" type="text/html"/>
		<id>https://bjeanes.com/posts/selector-free-cucumber-scenarios/</id>
		<content type="html">&lt;p&gt;&lt;small&gt;(a Serbo-Croation translation by Anja Skrbaa is available &lt;a href=&quot;http:&#x2F;&#x2F;science.webhostinggeeks.com&#x2F;selektor-free&quot;&gt;here&lt;&#x2F;a&gt;)&lt;&#x2F;small&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been using Cucumber since pretty much the first day I heard about it. I’ve worked on a lot of projects that have
relied on it’s presence for reliable development. Therefore, I’ve put a lot of effort into perfecting my Cucumber
infrastructure to make this fantastic tool even better. I’m going to share one such morsel of code that makes developing
with Cucumber even greater.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve worked on a lot of web applications and, as I’m sure many of you know, quite often the development of a web
application is focussed on the functionality foremost, and the interface and style is incorporated later. It may be that
the client doesn’t yet know the feel they want for their project or that they want to focus their budget towards
prototyping the application first.&lt;&#x2F;p&gt;
&lt;p&gt;This is fine, except for the fact that changing the HTML and CSS of a web application after a lot of functionality has
been developed is a fantastic way to break all your integration tests.&lt;&#x2F;p&gt;
&lt;p&gt;This is particularly true if you have scenarios like the following contrived one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#dcdfe4;&quot;&gt;&lt;code&gt;&lt;span&gt;When I fill in &amp;quot;Username&amp;quot; with &amp;quot;bjeanes&amp;quot; within &amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;And I press &amp;quot;Sign up!&amp;quot; within &amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Then I should see &amp;quot;You have successfully signed up&amp;quot; within &amp;quot;.flash.notice&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem is, of course, that designers might change the HTML that used to be &lt;code&gt;.main-panel form#signup-form&lt;&#x2F;code&gt; into
something sexier and more semantic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;This problem is not unlike an already-solved one; we’ve all moved away from hardcoding URLs like &amp;quot;&#x2F;users&#x2F;new&amp;quot; into our
views and Cucumber scenarios and replacing them with &lt;code&gt;new_user_path&lt;&#x2F;code&gt; and &lt;code&gt;the signup page&lt;&#x2F;code&gt;, respectively.&lt;&#x2F;p&gt;
&lt;p&gt;So why not apply the same formula that &lt;code&gt;paths.rb&lt;&#x2F;code&gt; uses for removing URLs from scenarios to our situation with selectors?&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what I add to all new projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# I&amp;#39;m in features&#x2F;step_definitions&#x2F;web_ext_steps.rb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^(.*) within ([^:&amp;quot;]+)$&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  with_scope(selector_for(scope)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When&lt;&#x2F;span&gt;&lt;span&gt; step
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# Multi-line version of above
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;^(.*) within ([^:&amp;quot;]+):$&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;table_or_string&lt;&#x2F;span&gt;&lt;span&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;  with_scope(selector_for(scope)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;#{step}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, table_or_string
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# I&amp;#39;m in features&#x2F;support&#x2F;selectors.rb
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span&gt;HtmlSelectorsHelper
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;selector_for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; scope
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the body&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;html &amp;gt; body&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Can&amp;#39;t find mapping from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;#{scope}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; to a selector.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Now, go and add a mapping in &lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;World&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HtmlSelectorsHelper&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;applying-the-solution&quot;&gt;Applying the Solution&lt;&#x2F;h2&gt;
&lt;p&gt;My previous example of the flawed Cucumber scenario now becomes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;When I&lt;&#x2F;span&gt;&lt;span&gt; fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;bjeanes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the sign up form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;And I&lt;&#x2F;span&gt;&lt;span&gt; press &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Sign up!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the sign up form
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Then I&lt;&#x2F;span&gt;&lt;span&gt; should see &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;You have successfully signed up&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; within the notice flash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the &lt;code&gt;selectors.rb&lt;&#x2F;code&gt; case statement gets the following additions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#282c34;color:#dcdfe4;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;case
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the sign up form&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.main-panel form#signup-form&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;the (notice|error|info) flash&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;.flash.&lt;&#x2F;span&gt;&lt;span&gt;#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;$1&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5c6370;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the scenario now identifies things on our page by their semantic identifiers, not by brittle CSS or XPath
locations which are prone to change. As a bonus, now &lt;del&gt;if&lt;&#x2F;del&gt; when they do change, the paths only need to be
updated in a single location in our Cucumber test suite!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;patching-cucumber&quot;&gt;Patching Cucumber&lt;&#x2F;h2&gt;
&lt;p&gt;I feel pretty strongly that CSS and XPath don’t belong in our feature files because not only does it encourage brittle
tests (as shown above), but also because those selectors are entirely irrelevant to end users, and that’s kind of the
main point of using a natural language DSL to describe our integration tests, i.e. putting on the user shoes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;I’d really like to patch this back into Cucumber, and I entirely plan to do so, providing I get the time.&lt;&#x2F;del&gt;
I got the time, and here is my &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;aslakhellesoy&#x2F;cucumber-rails&#x2F;pull&#x2F;63&quot;&gt;pull request&lt;&#x2F;a&gt; to have it merged.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expanding-the-solution&quot;&gt;Expanding the Solution&lt;&#x2F;h2&gt;
&lt;p&gt;You’ll note my &lt;code&gt;HtmlSelectorsHelper&lt;&#x2F;code&gt; module only accommodates CSS selectors. That’s only because I have never needed
XPath in this context. It’d be very simple to modify my examples to do so, though, with a combination of multiple return
values and a splat. That’s an exercise for the reader (or me if I end up patching Cucumber).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-word&quot;&gt;Final Word&lt;&#x2F;h2&gt;
&lt;p&gt;I apologise for the length of this article, but I congratulate you for making it all the way through it!&lt;&#x2F;p&gt;
&lt;p&gt;I now have so many blog post ideas lined up that I’ve had to create a new category in Things.app just to hold them all.
This means that I’ll be striving to get a few more posts done and out the door in the next few weeks, including a
performance comparison of different data encapsulations for web application APIs on the iPhone (i.e. is it better to use
Plists, JSON, or XML?) and a post on why I think there should be 8 RESTful actions, not the 7 that Rails prescribes by
default.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
