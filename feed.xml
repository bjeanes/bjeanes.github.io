<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://bjeanes.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bjeanes.com/" rel="alternate" type="text/html" /><updated>2020-07-25T00:31:19+00:00</updated><id>https://bjeanes.com/</id><title type="html">Bo Jeanes</title><author><name>bo</name></author><entry><title type="html">Deploy a sub-directory as a branch</title><link href="https://bjeanes.com/2017/12/deploy-directory-to-branch/" rel="alternate" type="text/html" title="Deploy a sub-directory as a branch" /><published>2017-12-11T00:00:00+00:00</published><updated>2017-12-11T00:00:00+00:00</updated><id>https://bjeanes.com/2017/12/deploy-directory-to-branch</id><content type="html" xml:base="https://bjeanes.com/2017/12/deploy-directory-to-branch/">&lt;p&gt;This post outlines a mechanism for using one branch as the source to generate a
compiled artifact into another branch. This is achieved without resorting to
moving files around a working directory and staging dirty changes away safely,
by leveraging some neat internals of Git.&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;But first, why would someone want to do this?&lt;/p&gt;

&lt;p&gt;In general, storing (deterministically) buildable artifacts in a repository can
be unneccessary and even problematic. For example: building a binary which
can’t run on all platforms that might use the repository; or creating large
files which grow the repository size rapidly (e.g. JARs).&lt;/p&gt;

&lt;p&gt;In the past, I have been in situations where using Git’s object model to store
an immutable history of changes in compiled outputs has been useful, in
particular for analytical purposes.&lt;/p&gt;

&lt;p&gt;However, this time, the reason is rather mundane: GitHub’s Jekyll compilation
whitelists certain plugins (for good, security-related reasons) and I had set
up this blog using a theme and plugin combination that apparently is not
compatible with GitHub-built Jekyll projects.&lt;/p&gt;

&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;

&lt;p&gt;GitHub expects to find source files for GitHub Pages deployment in either the
&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch (depending on whether its building a project page
or a user/org page). All that was necessary was to generate the compiled files
into that appropriate branch.&lt;/p&gt;

&lt;p&gt;However, I did not want it to be up to the person making changes to the blog to
have to remember to generate and commit the generated files. In addition, it was
important to me that the Git history of source changes was not conflated with
the adjacent need to store the compiled version.&lt;/p&gt;

&lt;p&gt;That meant:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;As much automated as possible&lt;/li&gt;
  &lt;li&gt;The compiled branch (&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, in this case) should be nothing but the
generated files and a separate commit history.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;understanding-git-commit&quot;&gt;Understanding &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;When you run a command like &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit .&lt;/code&gt;, Git is doing a few of things
of interest internally:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git-write-tree&lt;/code&gt; stores the current state of your (staged) files as a tree&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git-commit-tree&lt;/code&gt; creates a commit for that tree (and, usually, a parent
commit)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git-update-ref&lt;/code&gt; Updating a ref (branch) to point to that new commit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By dropping down a level and taking control of these primitives directly, we
can actually exercise a little bit more control over what is in the commit and
how that commit relates to the rest of the repository’s history.&lt;/p&gt;

&lt;h4 id=&quot;writing-a-tree-at-a-custom-root&quot;&gt;Writing a tree at a custom root&lt;/h4&gt;

&lt;p&gt;The key ingredient that we will leverage is the &lt;code class=&quot;highlighter-rouge&quot;&gt;--prefix&lt;/code&gt; flag to
&lt;code class=&quot;highlighter-rouge&quot;&gt;git-write-tree&lt;/code&gt;. This allows us to create a tree object rooted at an arbitrary
directory!&lt;/p&gt;

&lt;p&gt;For example, compare the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show $(git write-tree)
tree c97ce6b80599da62e34a684a245dec5df1228b8d

.buildkite/
.gitignore
CNAME
Gemfile
Gemfile.lock
_config.yml
_data/
_drafts/
assets/
bin/
index.html
pages/

$ git show $(git write-tree --prefix pages)
tree 8e479816fadad469d16bcb16c24413feb780765f

archive.html
category.html
tag.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;piecing-it-together&quot;&gt;Piecing it together&lt;/h3&gt;

&lt;p&gt;The main caveat to account for is that &lt;code class=&quot;highlighter-rouge&quot;&gt;git-write-tree&lt;/code&gt; will only write staged
or committed files. I don’t want to keep the built files in the source branch
so I have the build directory ignored, which means those files are neither
committed nor staged.&lt;/p&gt;

&lt;p&gt;To work around this, a &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/deploy&lt;/code&gt; script temporarily stages the files for the
duration of the commit building. &lt;strong&gt;NOTE&lt;/strong&gt;, because I am deploying to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;
branch, I configured the repository’s default branch to be &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and the
&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/deploy&lt;/code&gt; script lived there, along with all the Jekyll source files.&lt;/p&gt;

&lt;p&gt;Here’s a simplified version of the script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;build_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dist&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This can be substituted for any command which builds artifacts to a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# specific directory&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;--destination&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$build_dir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Force the files to be added, regardless of .gitignore&lt;/span&gt;
git add &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$build_dir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Write tree to an object&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git write-tree &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$build_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Un-stage the build so it is back to being ignored&lt;/span&gt;
git reset &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$build_dir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a new commit for that tree as a child of target branch's commit&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git commit-tree &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deploy&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Update the GitHub Pages' branch to the new commit&lt;/span&gt;
git update-ref refs/heads/&lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$commit&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Push the compiled branch to GitHub&lt;/span&gt;
git push origin &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;automated-builds&quot;&gt;Automated builds&lt;/h3&gt;

&lt;p&gt;I used our existing &lt;a href=&quot;https://buildkite.com&quot;&gt;Buildkite&lt;/a&gt; CI setup to quickly add
a build which essentially just called &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/deploy&lt;/code&gt; to automatically deploy
changes we made to GitHub (much the way that GitHub would automatically deploy
changes if I were committing directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;some-changes-for-resilience&quot;&gt;Some changes for resilience&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I wanted to preserve committer/authorship metadata for the deploy commits to
make it clear whose latest change is deployed. To handle this, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/deploy&lt;/code&gt; script takes these details from the commit being built and sets
some env vars before we generate the deploy commit:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_AUTHOR_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git show &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%an'&lt;/span&gt; HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_COMMITTER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_AUTHOR_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git show &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%ae'&lt;/span&gt; HEAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GIT_COMMITTER_EMAIL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git commit-tree &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deploy&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I wanted to make it clear which commit had been deployed, so I augmented the
commit creation step to record a description of the source commit in the commit
message, including whether or not the working directory had uncommitted
changes:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git describe &lt;span class=&quot;nt&quot;&gt;--dirty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--always&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# e.g. &quot;213c9af&quot;, &quot;213c9a-dirty&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git commit-tree &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Deploy &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$identifier&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For maximum re-usability, I have the script detect the target branch based on
the type of repository (project or user/org):&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Determine which branch GitHub pages is built from, for this repository&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git config remote.origin.url&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.github.io &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$remote&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.github.io.git &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gh-pages
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To still work in CI where a clean checkout has occurred without necessarily
creating local branch refs, I use long-form names
(&lt;code class=&quot;highlighter-rouge&quot;&gt;refs/remotes/origin/$branch&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;refs/heads/$branch&lt;/code&gt;, as appropriate)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;result&quot;&gt;Result&lt;/h3&gt;

&lt;p&gt;Feel free to have a look at the &lt;a href=&quot;https://github.com/covidence/covidence.github.io&quot;&gt;repository for the
blog&lt;/a&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch
contains the history of deployed changes and the &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; branch contains the
history of source changes.&lt;/p&gt;

&lt;p&gt;This blog post was deployed in this manner.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/nobuoka/d0f088df57d50e4cda1a&quot;&gt;Related gist&lt;/a&gt;&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><category term="git" /><category term="github" /><category term="shell" /><summary type="html">This post outlines a mechanism for using one branch as the source to generate a compiled artifact into another branch. This is achieved without resorting to moving files around a working directory and staging dirty changes away safely, by leveraging some neat internals of Git.</summary></entry><entry><title type="html">Automatically refresh staging databases weekly from production snapshot</title><link href="https://bjeanes.com/2017/12/automatically-refresh-staging-db/" rel="alternate" type="text/html" title="Automatically refresh staging databases weekly from production snapshot" /><published>2017-12-11T00:00:00+00:00</published><updated>2017-12-11T00:00:00+00:00</updated><id>https://bjeanes.com/2017/12/automatically-refresh-staging-db</id><content type="html" xml:base="https://bjeanes.com/2017/12/automatically-refresh-staging-db/">&lt;p&gt;To get the most out of staging environments, it is important to have production
quality data (in both variety and size) at your disposal to identify potential
production problems before your customers do. For example, good data allows
developers to check that new features behave as expected with real-world data,
that a bugfix actually fixes a bug for a known scenario, or to benchmark a
database migration or the performance of new code.&lt;/p&gt;

&lt;p&gt;Like many technology companies, at &lt;a href=&quot;https://www.covidence.org&quot;&gt;Covidence&lt;/a&gt; we
use staging environment in a number of these critical ways, and more. In fact,
we actually use several different staging environments, some persistent and
some temporary.&lt;/p&gt;

&lt;figure class=&quot;full tc&quot;&gt;
  &lt;img src=&quot;https://bjeanes.com/assets/images/heroku-pipelines.png&quot; alt=&quot;Heroku Pipelines&quot; /&gt;
  
    &lt;figcaption&gt;Heroku Pipelines
&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;production-deployments&quot;&gt;Production Deployments&lt;/h3&gt;

&lt;p&gt;In production, we run two main deployments: &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt;. Our
&lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; environment is… just that. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt; environment is version of
our application that acts as a kind of playground for potential customers to
evaluate our product or for existing customers to learn or experiment with the
product without risking their production data. Data in this environment is
expunged on a rolling basis.&lt;/p&gt;

&lt;h3 id=&quot;non-production-deployments&quot;&gt;Non-production Deployments&lt;/h3&gt;

&lt;p&gt;In staging, we have one environment each to mirror the production versions:
&lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-staging&lt;/code&gt;. These two deployments automatically get the
latest version of the code that has passed our continuous integration test
suite. The expectation is that these environments should be reasonably stable
and relatively safe to deploy to the production environments.&lt;/p&gt;

&lt;p&gt;Additionally, we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; environment which deploys the latest code,
regardless of build status. This environment is expected to be less stable and
is sometimes used to deploy feature branches that need to see production
quality data before it can be merged to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. This also tends to be the
environment in which migrations are tested and benchmarked.&lt;/p&gt;

&lt;p&gt;Lastly, we use an excellent feature of Heroku Pipelines to create disposable
staging apps for any open pull request to allow us to sanity check and QA test
the change.&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;

&lt;p&gt;Of all those environments, only the pull request apps have “seed” data.
&lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-staging&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; always have a recent snapshot of
production data to work with.&lt;/p&gt;

&lt;p&gt;Keeping fresh production quality data in staging environments is a really
common problem for many companies and can often go along time without a
solution. However, we knew that it was an important problem to solve if we were
to work efficiently and effectively with our small team.&lt;/p&gt;

&lt;p&gt;I want to share how we leverage some handy features of &lt;a href=&quot;https://www.heroku.com/postgres&quot;&gt;Heroku
Postgres&lt;/a&gt; to have effortless, push-button
production quality data in these staging environments.&lt;/p&gt;

&lt;h3 id=&quot;scheduled-and-push-button-database-forks&quot;&gt;Scheduled and push-button database forks&lt;/h3&gt;

&lt;p&gt;Basically, we use Heroku’s database “forking” functionality, environment
variable-based configuration and database promotion, the Heroku Toolbelt, and a
few Heroku API calls to orchestrate a replacement DB.&lt;/p&gt;

&lt;p&gt;We wrap up these steps in a script which runs every Sunday night via a
scheduled Buildkite job or whenever we push the “Build” button manually. This
means that our staging environment is never stale by more than about a week.&lt;/p&gt;

&lt;p&gt;The steps to do this for each app are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new database as a &lt;code class=&quot;highlighter-rouge&quot;&gt;--fast --fork&lt;/code&gt; of the production database, which
will use a compination of Postgres Write-Ahead Logs and leader-follower
replication to relatively quickly prepare a new database as a replica and
once it has caught up to the primary database, will separate from it as a
standalone instance.&lt;/li&gt;
  &lt;li&gt;Keep track of the name of the old DB and the new DB.&lt;/li&gt;
  &lt;li&gt;When the replica is fully prepared and ready to process queries, promote it
via environment variables on and a restart of the application.&lt;/li&gt;
  &lt;li&gt;De-provision the old database so we aren’t paying for it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For our &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;demo-staging&lt;/code&gt; copy, the dataset is actually so small that we
are using cheaper plans which don’t support Heroku’s forking, so for that we do
something slightly different:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create new database&lt;/li&gt;
  &lt;li&gt;Initiate a copy of data from the production version to staging version
(essentially a dump and then restore)&lt;/li&gt;
  &lt;li&gt;Once complete, promote new database and de-provision old one, as above.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;code&quot;&gt;Code&lt;/h4&gt;

&lt;p&gt;Here’s the actual script we use, more-or-less un-changed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ex&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pass in Heroku API token&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We run this script in a stateless Docker image, so to make the script a bit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# cleaner, we just write out the credentials to a file that the Heroku Toolbelt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# knows to read.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lq&lt;/span&gt; api.heroku.com ~/.netrc 2&amp;gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;machine api.heroku.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.netrc
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  login dev+heroku@covidence.org&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.netrc
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  password &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$token&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.netrc

  chmod 0600 ~/.netrc
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Helper function for calling Heroku API&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;hapi &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--fail&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--silent&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--netrc&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Accept: application/vnd.heroku+json; version=3'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://api.heroku.com&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Routine to wait for DB to be caught up, then promote it and de-provision the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# old instance.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;promote &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;

  heroku pg:wait &lt;span class=&quot;nt&quot;&gt;--wait-interval&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;
  heroku pg:unfollow &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--confirm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;::NEW_DATABASE &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;heroku addons:attach &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;::DATABASE &lt;span class=&quot;nt&quot;&gt;--as&lt;/span&gt; OLD_DATABASE
  heroku pg:promote &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; NEW_DATABASE
  heroku addons:detach &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; NEW_DATABASE
  heroku addons:destroy &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--confirm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; OLD_DATABASE
  heroku run:detached &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; rails runner &lt;span class=&quot;s1&quot;&gt;'Ops::Staging::Search.massacre!'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Routine to create a new DB with a deterministic name so that we can more&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# easily promote it later.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# There is also some logic here to recover from a build which got interrupted&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mid-way so that we don't accumulate orphaned DBs that we have to pay for.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;create &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;plan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;shift &lt;/span&gt;2

  &lt;span class=&quot;nv&quot;&gt;existing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hapi /addons/&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;::DATABASE | jq &lt;span class=&quot;nt&quot;&gt;-Mr&lt;/span&gt; .name&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hapi /addons/&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;::NEW_DATABASE | jq &lt;span class=&quot;nt&quot;&gt;-Mr&lt;/span&gt; .name &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$new&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;heroku addons:create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; heroku-postgresql:&lt;span class=&quot;nv&quot;&gt;$plan&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;--as&lt;/span&gt; NEW_DATABASE &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$new&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$existing&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;heroku addons:detach &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; NEW_DATABASE
      create &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$plan&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# already got a new one in waiting&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
  fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Takes a snapshot and copies it. This takes longer, breaks the destination&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# DB until it has completed, so is only used for demo to demo-staging, which&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# use Hobby DBs which cannot be followed/forked.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# One benefit of this which might be worth applying to staging/dev is that the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# destination data sizes (tables+indexes) are much smaller, which suits the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# smaller instance sizes used there.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;copy &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;

  heroku pg:copy &lt;span class=&quot;nv&quot;&gt;$src&lt;/span&gt;::DATABASE NEW_DATABASE &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--wait-interval&lt;/span&gt; 10 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dst&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--confirm&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dst&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create new DBs and trigger loading of data&lt;/span&gt;
create covidence-dev     premium-0 &lt;span class=&quot;nt&quot;&gt;--fork&lt;/span&gt; covidence-production::DATABASE &lt;span class=&quot;nt&quot;&gt;--fast&lt;/span&gt;
create covidence-staging premium-2 &lt;span class=&quot;nt&quot;&gt;--fork&lt;/span&gt; covidence-production::DATABASE &lt;span class=&quot;nt&quot;&gt;--fast&lt;/span&gt;
create covidence-demo-staging hobby-basic
copy covidence-demo covidence-demo-staging

&lt;span class=&quot;c&quot;&gt;# Promote DBs (these steps block until each DB to be ready for promotion)&lt;/span&gt;
promote covidence-dev
promote covidence-staging
promote covidence-demo-staging
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><category term="heroku" /><category term="postgres" /><category term="staging" /><category term="automation" /><category term="shell" /><summary type="html">To get the most out of staging environments, it is important to have production quality data (in both variety and size) at your disposal to identify potential production problems before your customers do. For example, good data allows developers to check that new features behave as expected with real-world data, that a bugfix actually fixes a bug for a known scenario, or to benchmark a database migration or the performance of new code.</summary></entry><entry><title type="html">Makers &amp;amp; Making</title><link href="https://bjeanes.com/2013/07/makers-and-making/" rel="alternate" type="text/html" title="Makers &amp; Making" /><published>2013-07-19T00:00:00+00:00</published><updated>2013-07-19T00:00:00+00:00</updated><id>https://bjeanes.com/2013/07/makers-and-making</id><content type="html" xml:base="https://bjeanes.com/2013/07/makers-and-making/">&lt;p&gt;&lt;small&gt;&lt;em&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; I have moved to another city to start a new job because I believe that the best way that I can make the world a better place is by making great tools to help other creative people do their best work possible.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Turning thought into reality quickly is what drew me to programming when I was young. There is such a raw and incomparable power that you get when making things with code and with perfectly suited software tools.&lt;/p&gt;

&lt;h2 id=&quot;makers&quot;&gt;Makers&lt;/h2&gt;

&lt;p&gt;A master cabinet maker can build the most ornate and beautiful cabinet with the simplest tools but it takes a long time and mistakes are costly. When mistakes are costly and the creative process is extensive, the cabinet maker’s ability to experiment and grow is hindered, and the quality can suffer as a result. With better tools, (s)he can be more productive, experiment with new designs through prototyping, and improve their craft.&lt;/p&gt;

&lt;h2 id=&quot;making-for-makers&quot;&gt;Making for Makers&lt;/h2&gt;

&lt;p&gt;I am a tool maker.&lt;/p&gt;

&lt;p&gt;I’ve known this for some time now. My deepest satisfaction in my work has come from making someone else’s job easier, more productive, and, most importantly, more enjoyable.&lt;/p&gt;

&lt;p&gt;The master cabinet maker is arguably adding value to the world, no matter their productivity. However, as a tool maker, one has the ability to have a multiplicative effect on the world. By making tools for other makers the effect is arguably exponential.&lt;/p&gt;

&lt;p&gt;I want to help all makers experiment, grow, and, ultimately, make the world better.&lt;/p&gt;

&lt;p&gt;Building great tools is quickly becoming my &lt;a href=&quot;https://vimeo.com/36579366&quot;&gt;guiding principle&lt;/a&gt;. I plan to do this by remembering that &lt;a href=&quot;http://www.pechakucha.org/channels/table-xi/presentations/the-most-valuable-skill&quot;&gt;feedback is the most valuable skill&lt;/a&gt; to learning, growing, and making and incorporating this concept into the tools that I build. Great tools provide actionable and specific feedback quickly and directly.&lt;/p&gt;

&lt;h2 id=&quot;heroku-makes-for-makers&quot;&gt;Heroku Makes for Makers&lt;/h2&gt;

&lt;p&gt;Next Monday will be my first day at &lt;a href=&quot;https://www.heroku.com&quot;&gt;Heroku&lt;/a&gt;. I’ve used Heroku in some form or another since it was &lt;a href=&quot;https://blog.heroku.com/archives/2009/1/12/whats_up_at_heroku&quot;&gt;an online code editor for Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The moment I knew I was going to join Heroku was when I was allowed to sit in on one of their all hands, where I heard &lt;a href=&quot;https://twitter.com/teich&quot;&gt;Oren Teich&lt;/a&gt; talk about Heroku’s guiding principle. More or less, he articulated my own guiding principle of helping makers.&lt;/p&gt;

&lt;p&gt;I couldn’t be more excited to start.&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">TL;DR I have moved to another city to start a new job because I believe that the best way that I can make the world a better place is by making great tools to help other creative people do their best work possible. Turning thought into reality quickly is what drew me to programming when I was young. There is such a raw and incomparable power that you get when making things with code and with perfectly suited software tools. Makers A master cabinet maker can build the most ornate and beautiful cabinet with the simplest tools but it takes a long time and mistakes are costly. When mistakes are costly and the creative process is extensive, the cabinet maker’s ability to experiment and grow is hindered, and the quality can suffer as a result. With better tools, (s)he can be more productive, experiment with new designs through prototyping, and improve their craft. Making for Makers I am a tool maker. I’ve known this for some time now. My deepest satisfaction in my work has come from making someone else’s job easier, more productive, and, most importantly, more enjoyable. The master cabinet maker is arguably adding value to the world, no matter their productivity. However, as a tool maker, one has the ability to have a multiplicative effect on the world. By making tools for other makers the effect is arguably exponential. I want to help all makers experiment, grow, and, ultimately, make the world better. Building great tools is quickly becoming my guiding principle. I plan to do this by remembering that feedback is the most valuable skill to learning, growing, and making and incorporating this concept into the tools that I build. Great tools provide actionable and specific feedback quickly and directly. Heroku Makes for Makers Next Monday will be my first day at Heroku. I’ve used Heroku in some form or another since it was an online code editor for Rails. The moment I knew I was going to join Heroku was when I was allowed to sit in on one of their all hands, where I heard Oren Teich talk about Heroku’s guiding principle. More or less, he articulated my own guiding principle of helping makers. I couldn’t be more excited to start.</summary></entry><entry><title type="html">Two months without Twitter</title><link href="https://bjeanes.com/2013/05/two-months-without-twitter/" rel="alternate" type="text/html" title="Two months without Twitter" /><published>2013-05-10T00:00:00+00:00</published><updated>2013-05-10T00:00:00+00:00</updated><id>https://bjeanes.com/2013/05/two-months-without-twitter</id><content type="html" xml:base="https://bjeanes.com/2013/05/two-months-without-twitter/">&lt;p&gt;Two months ago, frustrated with inability to focus on the things I cared about in life and at work, I formed a theory:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Twitter (et al.) has slowly been rewiring my brain to encourage rapid context switching.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On average, it probably takes less than a second to read and process a tweet. There are often hundreds of new tweets between “hits,” which means that during vulnerable times of the day (e.g. in bed before sleep), &lt;strong&gt;my brain is rapidly context switching hundreds of times in a matter of minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For me, Twitter has always been about consuming information and learning. Despite the fear of “missing out” on interesting links or thoughts in my network[1], which is predominantly made of people I respect and trust, &lt;strong&gt;I decided that this rapid and varied consumption is not a healthy way to achieve this goal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s been two months since I uninstalled all Twitter (and Facebook) applications from all my devices. I still tweet occasionally (using iOS/Mac’s Notification Center), but I make a point not to check the Twitter feed. &lt;strong&gt;I re-enabled email notifications&lt;/strong&gt; for mentions and only log in to the web interface to reply to mentions/messages.&lt;/p&gt;

&lt;p&gt;I love it. I want this to stick.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] &lt;a href=&quot;http://getprismatic.com&quot;&gt;Prismatic&lt;/a&gt; is a pretty great way of countering this. It usually cuts through the noise and gives me meal-sized versions of the best content, instead of bite-sized versions of irrelevancy.&lt;/small&gt;&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">Two months ago, frustrated with inability to focus on the things I cared about in life and at work, I formed a theory: Twitter (et al.) has slowly been rewiring my brain to encourage rapid context switching. On average, it probably takes less than a second to read and process a tweet. There are often hundreds of new tweets between “hits,” which means that during vulnerable times of the day (e.g. in bed before sleep), my brain is rapidly context switching hundreds of times in a matter of minutes. For me, Twitter has always been about consuming information and learning. Despite the fear of “missing out” on interesting links or thoughts in my network[1], which is predominantly made of people I respect and trust, I decided that this rapid and varied consumption is not a healthy way to achieve this goal. It’s been two months since I uninstalled all Twitter (and Facebook) applications from all my devices. I still tweet occasionally (using iOS/Mac’s Notification Center), but I make a point not to check the Twitter feed. I re-enabled email notifications for mentions and only log in to the web interface to reply to mentions/messages. I love it. I want this to stick. [1] Prismatic is a pretty great way of countering this. It usually cuts through the noise and gives me meal-sized versions of the best content, instead of bite-sized versions of irrelevancy.</summary></entry><entry><title type="html">A collaborative thought experiment on company environment, values, culture, and ethos</title><link href="https://bjeanes.com/2013/03/a-collaborative-thought-experiment-on-company-environment-values-culture-and-ethos/" rel="alternate" type="text/html" title="A collaborative thought experiment on company environment, values, culture, and ethos" /><published>2013-03-05T00:00:00+00:00</published><updated>2013-03-05T00:00:00+00:00</updated><id>https://bjeanes.com/2013/03/a-collaborative-thought-experiment-on-company-environment-values-culture-and-ethos</id><content type="html" xml:base="https://bjeanes.com/2013/03/a-collaborative-thought-experiment-on-company-environment-values-culture-and-ethos/">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: add your thoughts/experience on company values and culture to &lt;a href=&quot;https://github.com/bjeanes/culture&quot;&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lately, I have been thinking a lot about the types of working environments and how they impact the productivity and happiness of the people who work in them.&lt;/p&gt;

&lt;p&gt;After many discussions on and research into the topics of leadership, management, and company culture, I felt like I had to start taking notes of how everything pieced together. Specifically, I wanted to write down what the culture and environment look like of a company that I would love to work at and/or start.&lt;/p&gt;

&lt;p&gt;Being a developer and contributor to open source software, it seemed clear to me that something like this could benefit immensely from a collaborative and open approach.&lt;/p&gt;

&lt;p&gt;And so, &lt;a href=&quot;https://github.com/bjeanes/culture&quot;&gt;here&lt;/a&gt; is the ever-evolving work and distillation of this process.&lt;/p&gt;

&lt;p&gt;I’d love for people to contribute their input in the form of pull requests and discussions. And, where more appropriate, people or companies could fork the still-not-aptly-titled work to form the basis of a different set of values.&lt;/p&gt;

&lt;p&gt;If I were to start a company right now, a living document like this would be available for all employees to see, discuss, dispute, and change.&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">TL;DR: add your thoughts/experience on company values and culture to this repo. Lately, I have been thinking a lot about the types of working environments and how they impact the productivity and happiness of the people who work in them. After many discussions on and research into the topics of leadership, management, and company culture, I felt like I had to start taking notes of how everything pieced together. Specifically, I wanted to write down what the culture and environment look like of a company that I would love to work at and/or start. Being a developer and contributor to open source software, it seemed clear to me that something like this could benefit immensely from a collaborative and open approach. And so, here is the ever-evolving work and distillation of this process. I’d love for people to contribute their input in the form of pull requests and discussions. And, where more appropriate, people or companies could fork the still-not-aptly-titled work to form the basis of a different set of values. If I were to start a company right now, a living document like this would be available for all employees to see, discuss, dispute, and change.</summary></entry><entry><title type="html">Critiquing Leadership (Part 1 of N on Leadership)</title><link href="https://bjeanes.com/2013/02/critiquing-leadership-part-1-of-n-on-leadership/" rel="alternate" type="text/html" title="Critiquing Leadership (Part 1 of N on Leadership)" /><published>2013-02-25T00:00:00+00:00</published><updated>2013-02-25T00:00:00+00:00</updated><id>https://bjeanes.com/2013/02/critiquing-leadership-part-1-of-n-on-leadership</id><content type="html" xml:base="https://bjeanes.com/2013/02/critiquing-leadership-part-1-of-n-on-leadership/">&lt;p&gt;&lt;small&gt;This is part 1 of some unknown number of thoughts and essays on leadership. Your thoughts are welcomed in the comments.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If leaders (or managers, as it were) are not constantly soliciting critique from their followers, their harshest critics won’t feel safe being honest or speaking up at all.&lt;/p&gt;

&lt;p&gt;This can create a bubble of false perception, by such leaders, that they are doing well. Instead of hearing the honest criticism (which, of course, still exists), it will spread laterally behind closed doors and manifest in alienation, resentment, and/or apathy.&lt;/p&gt;

&lt;p&gt;This can only perpetuate the problem.&lt;/p&gt;

&lt;p&gt;If you are a leader and you are not being openly critized by those you purport to lead, that is a warning sign. Note that, like all humans everywhere, you are not perfect; a lack of criticism is therefore a sign of something other than your successes. Likely, it’s a sign that you do not have a healthy relationship with your followers (or employees).&lt;/p&gt;

&lt;p&gt;Do not wait for criticism — seek it out. Do not form a bubble of complacency that limits your perception of reality and your ability to handle the inevitable, your loss of followers (or employees).&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">This is part 1 of some unknown number of thoughts and essays on leadership. Your thoughts are welcomed in the comments. If leaders (or managers, as it were) are not constantly soliciting critique from their followers, their harshest critics won’t feel safe being honest or speaking up at all. This can create a bubble of false perception, by such leaders, that they are doing well. Instead of hearing the honest criticism (which, of course, still exists), it will spread laterally behind closed doors and manifest in alienation, resentment, and/or apathy. This can only perpetuate the problem. If you are a leader and you are not being openly critized by those you purport to lead, that is a warning sign. Note that, like all humans everywhere, you are not perfect; a lack of criticism is therefore a sign of something other than your successes. Likely, it’s a sign that you do not have a healthy relationship with your followers (or employees). Do not wait for criticism — seek it out. Do not form a bubble of complacency that limits your perception of reality and your ability to handle the inevitable, your loss of followers (or employees).</summary></entry><entry><title type="html">Talk: SSH Can Do That?</title><link href="https://bjeanes.com/2012/11/talk-ssh-can-do-that/" rel="alternate" type="text/html" title="Talk: SSH Can Do That?" /><published>2012-11-29T00:00:00+00:00</published><updated>2012-11-29T00:00:00+00:00</updated><id>https://bjeanes.com/2012/11/talk-ssh-can-do-that</id><content type="html" xml:base="https://bjeanes.com/2012/11/talk-ssh-can-do-that/">&lt;p&gt;Last night I gave a talk on the darker side of SSH at &lt;a href=&quot;www.meetup.com/ChicagoSC/&quot;&gt;ChiSC meetup group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a video version (better quality one coming soon) for those who are interested:&lt;/p&gt;

&lt;iframe src=&quot;http://player.vimeo.com/video/54505525?byline=0&amp;amp;portrait=0&amp;amp;badge=0&amp;amp;color=cc7833&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">Last night I gave a talk on the darker side of SSH at ChiSC meetup group. Here’s a video version (better quality one coming soon) for those who are interested:</summary></entry><entry><title type="html">Call Clojure function on a timer</title><link href="https://bjeanes.com/2012/09/call-clojure-function-on-a-timer/" rel="alternate" type="text/html" title="Call Clojure function on a timer" /><published>2012-09-20T00:00:00+00:00</published><updated>2012-09-20T00:00:00+00:00</updated><id>https://bjeanes.com/2012/09/call-clojure-function-on-a-timer</id><content type="html" xml:base="https://bjeanes.com/2012/09/call-clojure-function-on-a-timer/">&lt;p&gt;In Clojure, I didn’t see a nice way to simply call a function on a timer (e.g. to poll for changes in another service).&lt;/p&gt;

&lt;p&gt;I didn’t find something in &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.core&lt;/code&gt; to achieve this readily (but &lt;code class=&quot;highlighter-rouge&quot;&gt;clojure.core&lt;/code&gt; is quite big, so I may have missed something obvious — let me know), so I whipped up the following to put in my project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;util.clj&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Call f with args every ms. First call will be after ms&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;doseq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Thread/sleep&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick-now&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Call f with args every ms. First call will be immediately (and blocking)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two variants. &lt;code class=&quot;highlighter-rouge&quot;&gt;tick&lt;/code&gt; waits &lt;code class=&quot;highlighter-rouge&quot;&gt;ms&lt;/code&gt; milliseconds and then calls &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; and repeats indefinitely. &lt;code class=&quot;highlighter-rouge&quot;&gt;tick-now&lt;/code&gt; does the same thing except it calls &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt; &lt;em&gt;before&lt;/em&gt; starting the timer.&lt;/p&gt;

&lt;p&gt;They are simple to use:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; 500ms delay&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; 500ms delay&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;; 500ms delay&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my project, I’m using them like so:&lt;/p&gt;

&lt;div class=&quot;language-clojure highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start-fetchers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api-token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;partial&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick-now&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update-project-list!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api-token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tick-now&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch-milestones!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api-token&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects-to-fetch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;milestones-by-project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">In Clojure, I didn’t see a nice way to simply call a function on a timer (e.g. to poll for changes in another service). I didn’t find something in clojure.core to achieve this readily (but clojure.core is quite big, so I may have missed something obvious — let me know), so I whipped up the following to put in my project’s util.clj file: (defn tick &quot;Call f with args every ms. First call will be after ms&quot; [ms f &amp;amp; args] (future (doseq [f (repeatedly #(apply f args))] (Thread/sleep ms) (f)))) (defn tick-now &quot;Call f with args every ms. First call will be immediately (and blocking)&quot; [ms f &amp;amp; args] (apply f args) (apply tick ms f args) There are two variants. tick waits ms milliseconds and then calls f with args and repeats indefinitely. tick-now does the same thing except it calls f with args before starting the timer. They are simple to use: user=&amp;gt; (tick 500 #(println &quot;hi&quot;)) ; 500ms delay hi ; 500ms delay hi ; 500ms delay hi ... In my project, I’m using them like so: (defn start-fetchers [api-token] (future (let [minutes (partial * 60 1000)] (tick-now (minutes 60) update-project-list! api-token) (tick-now (minutes 5) fetch-milestones! api-token projects-to-fetch milestones-by-project))))</summary></entry><entry><title type="html">Pure Evil</title><link href="https://bjeanes.com/2012/09/pure-evil/" rel="alternate" type="text/html" title="Pure Evil" /><published>2012-09-07T00:00:00+00:00</published><updated>2012-09-07T00:00:00+00:00</updated><id>https://bjeanes.com/2012/09/pure-evil</id><content type="html" xml:base="https://bjeanes.com/2012/09/pure-evil/">&lt;p&gt;I love Vim. I take that back — I love &lt;strong&gt;modal editing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Actually, I think very few people like &lt;em&gt;Vim&lt;/em&gt;, it just happens to be the best kid on the block at modal editing. But, after using Vim (and, God, does it take a while to learn to &lt;em&gt;use&lt;/em&gt; it), you are reduced to a &lt;q&gt;&lt;a href=&quot;http://haldean.org/docstore/?vim-problems&quot;&gt;pathetic teary wreck every time [you] have to use a text editor that isn’t vim&lt;/a&gt;&lt;/q&gt;.&lt;/p&gt;

&lt;p&gt;And why &lt;em&gt;is&lt;/em&gt; it so debilitating to use something other than Vim for those who have honed their modal editing skills? Frankly, magic sauce of Vim is (mostly) made up from a few quite simple ingredients: motions, text objects, operators. There are plenty of cool tricks hidden inside Vim, but those three main things are the things you really miss, consistently, when using something else.&lt;/p&gt;

&lt;p&gt;Every now and then, when forced outside of the comforting (yet somehow cold) embrace of Vim, the Vimmer flirts with Sublime Text 2’s &lt;a href=&quot;http://www.sublimetext.com/docs/2/vintage.html&quot;&gt;vintage mode&lt;/a&gt; or &lt;a href=&quot;http://plugins.intellij.net/plugin/?id=164&quot;&gt;IdeaVIM&lt;/a&gt;. We may even be impressed — but, eventually, something falls apart and the abstraction leaks.&lt;/p&gt;

&lt;p&gt;Usually, this failure happens because the Vi(m) emulation layer often doesn’t implement motions, text objects, and operators. They just implement some keystrokes that appear to do the same thing in the same way — until you try something the developer didn’t preempt.&lt;/p&gt;

&lt;p&gt;If I could have an editor that did these things &lt;em&gt;properly&lt;/em&gt;, I would have no real attachment to Vim. I have other things about Vim that I love and would hate to lose but they aren’t unique and other editors (can) have them, too.&lt;/p&gt;

&lt;p&gt;Luckily for me, I’ve been doing too much Clojure to ignore Emacs forever and 2 weeks ago, I switched. Here’s how it played out:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nope — not for me… But, wait! Let us try this &lt;a href=&quot;http://emacswiki.org/emacs/Evil&quot;&gt;Evil Mode&lt;/a&gt; so we can mock their pitiful attempt at modal editing (*evil laugh here*).  What’s this‽ It’s actually good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inner dialogs aside, I’m not kidding; Evil Mode is stunning. It doesn’t have &lt;em&gt;everything&lt;/em&gt; — but everything that it does have is built up using the same &lt;strike&gt;functions&lt;/strike&gt; macros that you can use to extend it. Those are: &lt;code class=&quot;highlighter-rouge&quot;&gt;(evil-define-state)&lt;/code&gt; (“mode” is an existing term in Emacs so what Vim calls modes, Evil Mode calls “states”), &lt;code class=&quot;highlighter-rouge&quot;&gt;(evil-define-motion)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(evil-define-operator)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(evil-define-text-object)&lt;/code&gt;, and a &lt;a href=&quot;https://gitorious.org/evil/evil/blobs/raw/doc/doc/evil.pdf&quot;&gt;few others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Evil Mode correctly implements the plumbing to wire these things together so that the Vim “language” which becomes natural and reflexive (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;di”&lt;/code&gt; -&amp;gt; “&lt;strong&gt;d&lt;/strong&gt;elete &lt;strong&gt;i&lt;/strong&gt;nside double quotes”, &lt;code class=&quot;highlighter-rouge&quot;&gt;vt &lt;/code&gt; -&amp;gt; “&lt;strong&gt;v&lt;/strong&gt;isually select &lt;strong&gt;t&lt;/strong&gt;ill space`) is completely preserved. If you wanted to define a new text object (e.g. a Ruby block), it is trivial to do so and all of the motions and operators will work flawlessly with it immediately. Frankly, it’s not even that nice in Vim.&lt;/p&gt;

&lt;p&gt;At the end of the day, I’ve always hated things like VimScript and Vim’s single-threadedness but I could never walk away from a truly powerful (and mostly extensible) modal editing system. Now, that has changed; I get ELisp (which, for all its faults, is exponentially better than VimScript), a saner package system, and a level of extensibility that, by design, can never be matched by Vim. All that and I don’t have to give up modal editing? Hell yes!&lt;/p&gt;

&lt;p&gt;Bonus points: one of the “states” that Evil implements is an Emacs state; this leaves Emacs and all it’s default behavior and keymappings 100% intact, meaning you can pair fearlessly with Emacsen, or slowly learn more about the Emacs way of doing things, if desirable.&lt;/p&gt;

&lt;p&gt;So far, I’ve rarely noticed I’m not in Vim and am constantly surprised when I employ Vim reflexes in Emacs and they work &lt;em&gt;exactly&lt;/em&gt; as expected or better (seriously, try &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/foo/bar/g&lt;/code&gt; in Evil mode and tell me you don’t squeal with joy).&lt;/p&gt;

&lt;p&gt;I refuse to pick a single side, so I’m picking both. I’m going to edit modally in Emacs and I’m going to be happy doing it! I don’t care if I simultaneously piss off Vim users and Emacs users — hell, they need more things in common anyway…&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">I love Vim. I take that back — I love modal editing. Actually, I think very few people like Vim, it just happens to be the best kid on the block at modal editing. But, after using Vim (and, God, does it take a while to learn to use it), you are reduced to a pathetic teary wreck every time [you] have to use a text editor that isn’t vim. And why is it so debilitating to use something other than Vim for those who have honed their modal editing skills? Frankly, magic sauce of Vim is (mostly) made up from a few quite simple ingredients: motions, text objects, operators. There are plenty of cool tricks hidden inside Vim, but those three main things are the things you really miss, consistently, when using something else. Every now and then, when forced outside of the comforting (yet somehow cold) embrace of Vim, the Vimmer flirts with Sublime Text 2’s vintage mode or IdeaVIM. We may even be impressed — but, eventually, something falls apart and the abstraction leaks. Usually, this failure happens because the Vi(m) emulation layer often doesn’t implement motions, text objects, and operators. They just implement some keystrokes that appear to do the same thing in the same way — until you try something the developer didn’t preempt. If I could have an editor that did these things properly, I would have no real attachment to Vim. I have other things about Vim that I love and would hate to lose but they aren’t unique and other editors (can) have them, too. Luckily for me, I’ve been doing too much Clojure to ignore Emacs forever and 2 weeks ago, I switched. Here’s how it played out: Nope — not for me… But, wait! Let us try this Evil Mode so we can mock their pitiful attempt at modal editing (*evil laugh here*). What’s this‽ It’s actually good! Inner dialogs aside, I’m not kidding; Evil Mode is stunning. It doesn’t have everything — but everything that it does have is built up using the same functions macros that you can use to extend it. Those are: (evil-define-state) (“mode” is an existing term in Emacs so what Vim calls modes, Evil Mode calls “states”), (evil-define-motion), (evil-define-operator), (evil-define-text-object), and a few others. Evil Mode correctly implements the plumbing to wire these things together so that the Vim “language” which becomes natural and reflexive (e.g. di” -&amp;gt; “delete inside double quotes”, vt -&amp;gt; “visually select till space`) is completely preserved. If you wanted to define a new text object (e.g. a Ruby block), it is trivial to do so and all of the motions and operators will work flawlessly with it immediately. Frankly, it’s not even that nice in Vim. At the end of the day, I’ve always hated things like VimScript and Vim’s single-threadedness but I could never walk away from a truly powerful (and mostly extensible) modal editing system. Now, that has changed; I get ELisp (which, for all its faults, is exponentially better than VimScript), a saner package system, and a level of extensibility that, by design, can never be matched by Vim. All that and I don’t have to give up modal editing? Hell yes! Bonus points: one of the “states” that Evil implements is an Emacs state; this leaves Emacs and all it’s default behavior and keymappings 100% intact, meaning you can pair fearlessly with Emacsen, or slowly learn more about the Emacs way of doing things, if desirable. So far, I’ve rarely noticed I’m not in Vim and am constantly surprised when I employ Vim reflexes in Emacs and they work exactly as expected or better (seriously, try :%s/foo/bar/g in Evil mode and tell me you don’t squeal with joy). I refuse to pick a single side, so I’m picking both. I’m going to edit modally in Emacs and I’m going to be happy doing it! I don’t care if I simultaneously piss off Vim users and Emacs users — hell, they need more things in common anyway…</summary></entry><entry><title type="html">Happier as a Hacker</title><link href="https://bjeanes.com/2012/09/happier-as-a-hacker/" rel="alternate" type="text/html" title="Happier as a Hacker" /><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><id>https://bjeanes.com/2012/09/happier-as-a-hacker</id><content type="html" xml:base="https://bjeanes.com/2012/09/happier-as-a-hacker/">&lt;p&gt;I’ve grown a lot in the last few years, personally and, specifically, in my career. My values have changed and it’s affected the way I think and work.&lt;/p&gt;

&lt;p&gt;There has been a gradual progression towards caring more and more about the Right Way™ to do things. For example, more than ever before, I value simplicity and clarity over ease and cleverness (an epidemic that greatly afflicts the Ruby community, in my opinion).&lt;/p&gt;

&lt;p&gt;But, these values have come at a cost to me. Somewhere along the way, I complacently let &lt;em&gt;getting it right&lt;/em&gt; become far more important than &lt;em&gt;getting it done&lt;/em&gt;.” Don’t get me wrong, getting things right is very important — where I went wrong was valuing getting it right the &lt;strong&gt;first&lt;/strong&gt; time.&lt;/p&gt;

&lt;p&gt;It may not plague others to the extent that it has me, but this misplaced obsession has gotten in the way of progress. It’s caused a type of analysis paralysis not unlike writers’ block; I discard ideas and directions too early because they aren’t “good enough.” But exploring a potentially bad direction is still being better than having no direction — which is the only place you end up when you discard ideas before they have a chance to blossom.&lt;/p&gt;

&lt;p&gt;In the eternal words of &lt;a href=&quot;http://en.wikipedia.org/wiki/Into_the_Woods&quot;&gt;Little Red Ridinghood&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Isn’t it nice to know a lot?&lt;br /&gt;
And a little bit not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was happier as a hacker, blissfully ignorant as I was, because I got things done.&lt;/p&gt;

&lt;p&gt;It’s time to become a hacker again; it’s time to be creative and explorative, and work towards &lt;em&gt;approximating&lt;/em&gt; the Right Way™, iteratively. Truly, this is one of the great realizations of Agile — focus on progress instead of planning and pre-empting every possible outcome.&lt;/p&gt;

&lt;p&gt;I can’t forget that.&lt;/p&gt;</content><author><name>Bo Jeanes</name><email>blog@bjeanes.com</email></author><summary type="html">I’ve grown a lot in the last few years, personally and, specifically, in my career. My values have changed and it’s affected the way I think and work. There has been a gradual progression towards caring more and more about the Right Way™ to do things. For example, more than ever before, I value simplicity and clarity over ease and cleverness (an epidemic that greatly afflicts the Ruby community, in my opinion). But, these values have come at a cost to me. Somewhere along the way, I complacently let getting it right become far more important than getting it done.” Don’t get me wrong, getting things right is very important — where I went wrong was valuing getting it right the first time. It may not plague others to the extent that it has me, but this misplaced obsession has gotten in the way of progress. It’s caused a type of analysis paralysis not unlike writers’ block; I discard ideas and directions too early because they aren’t “good enough.” But exploring a potentially bad direction is still being better than having no direction — which is the only place you end up when you discard ideas before they have a chance to blossom. In the eternal words of Little Red Ridinghood: Isn’t it nice to know a lot? And a little bit not. I was happier as a hacker, blissfully ignorant as I was, because I got things done. It’s time to become a hacker again; it’s time to be creative and explorative, and work towards approximating the Right Way™, iteratively. Truly, this is one of the great realizations of Agile — focus on progress instead of planning and pre-empting every possible outcome. I can’t forget that.</summary></entry></feed>